{"version":3,"sources":["config.js","logo-tag.js","page.js","paint.js","umi.js"],"names":["HEIGHT","GRADIENTS","desert","colors","hexArrayToColors","positions","forest","arctic","oldMap","CONFIG","islands","attributes","radial","height","horizontal","mass","octaves","frequency","water","gradients","guide_top","persistence","guide_direction_radial","guide_direction_horizontal","guide_direction_vertical","vertical","guide_noise_octaves","guide_noise_persistence","guide_noise_frequency","postcard","arr","map","hex","c","replace","Math","round","LogoTag","HTMLElement","[object Object]","super","fetch","this","getAttribute","then","response","text","innerHTML","paintCanvases","document","querySelector","paintIndexCanvases","paintGalleryCanvases","paintGuideCanvases","paintTravelCanvases","async","Umi","loadShaders","grid","style","getComputedStyle","nColumns","split","length","width","parseInt","slice","Paint","makeUmiImgs","p","options","config","alt","Promise","r","setTimeout","overrideSize","sleep","makeUmiCanvas","customElements","define","window","onload","fractionalSize","pixelsPerCell","frac","ppc","selector","querySelectorAll","forEach","e","gl","getContext","canvas","umi","configureShader","draw","data","toDataURL","img","createElement","src","parentNode","replaceChildren","parent","includes","hidden","appendChild","ctx","construct","resImg","branch","id","sakura","drawImage","removeChild","imageData","getImageData","iData","everyN","nLayers","heights","y","line","x","i","push","n","ftoi","s","rgb","g","b","f","border","result","Array","hlx","ratio","skip2","h","col","yr","fill","lerp","pickColor","set","putImageData","v","lerpColor","colA","colB","value","start","end","context","console","error","logQuery","getElementById","name","getElementsByClassName","path","vertex","fragment","shaders","getShaders","_shadersTemplate","useDefault","sc","_attributes","_gradients","getAttributes","viewport","configureFragment","shadersCompiled","createShader","FRAGMENT_SHADER","VERTEX_SHADER","program","createProgram","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionAttributeLocation","getAttribLocation","vertexAttribPointer","FLOAT","FALSE","BYTES_PER_ELEMENT","enableVertexAttribArray","useProgram","drawArrays","TRIANGLE_FAN","shader","option","setShaderGradients","setShaderAttributes","params","res","_params","URLSearchParams","location","search","get","d","parseFloat","w","innerWidth","innerHeight","square","floor","random","offsetx","offsety","_rad","_hor","_ver","formatShaderFloat","log","joinAttributes","a","join","getIfValid","isNaN","toString","colorsCode","positionsCode","number","components","shaderFiles","file","getFile","method","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","enumerateSource","getShaderInfoLog","deleteShader","vertexShader","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","row"],"mappings":"AAAA,MAAAA,OAAA,IAEAC,UAAA,CACAC,OAAA,CACAC,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,GAAA,GAAA,IAAA,MAEAC,OAAA,CACAH,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,GAAA,GAAA,IAAA,MAEAE,OAAA,CACAJ,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,IAAA,GAAA,GAAA,GAAA,MAEAG,OAAA,CACAL,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CACA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GACA,GAAA,GAAA,IAAA,KAKAI,OAAA,CACAC,QAAA,CACAC,WAAA,CACAC,QAAA,IAGAV,OAAA,CACAS,WAAA,CACAE,OAnEA,IAmEA,EACAC,YAAA,EACAC,KAAA,IACAC,QAAA,EACAC,UAAA,MACAC,MAAA,KAEAC,UAAAlB,UAAAC,QAEAI,OAAA,CACAK,WAAA,CACAE,OA9EA,IA+EAC,YAAA,EACAI,MAAA,IAEAC,UAAAlB,UAAAK,QAEAC,OAAA,CACAI,WAAA,CACAE,OAtFA,IAuFAC,YAAA,EACAF,QAAA,EACAG,KAAA,IACAE,UAAA,OAEAE,UAAAlB,UAAAM,QAEAa,UAAA,CACAT,WAAA,CACAI,KAAA,IACAM,YAAA,IACAJ,UAAA,KACAC,MAAA,IAEAC,UAAAlB,UAAAO,QAEAc,uBAAA,CACAX,WAAA,CACAC,QAAA,GAEAO,UAAAlB,UAAAO,QAEAe,2BAAA,CACAZ,WAAA,CACAG,YAAA,GAEAK,UAAAlB,UAAAO,QAEAgB,yBAAA,CACAb,WAAA,CACAc,UAAA,GAEAN,UAAAlB,UAAAO,QAEAkB,oBAAA,CACAf,WAAA,CACAK,QAAA,GAEAG,UAAAlB,UAAAO,QAEAmB,wBAAA,CACAhB,WAAA,CACAU,YAAA,IAEAF,UAAAlB,UAAAO,QAEAoB,sBAAA,CACAjB,WAAA,CACAM,UAAA,KAEAE,UAAAlB,UAAAO,QAEAqB,SAAA,CACAlB,WAAA,CACAC,QAAA,EACAG,KAAA,GACAC,QAAA,EACAC,UAAA,OAEAE,UAAA,CACAhB,OAAA,CACA,CAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,IAEAE,UAAA,CAAA,EAAA,MAKA,SAAAD,iBAAA0B,GAUA,OATAA,EAAAA,EAAAC,KAAAC,IACA,MAAAC,EAAAD,EAAAE,QAAA,IAAA,MACA,MAAA,EACAD,GAAA,GAAA,KAAA,KACAA,GAAA,EAAA,KAAA,KACA,IAAAA,GAAA,KACAF,KAAAE,GAAAE,KAAAC,MAAA,IAAAH,GAAA,SCnKA,MAAAI,gBAAAC,YACAC,cACAC,QAGAD,oBACAE,MAAAC,KAAAC,aAAA,QACAC,MAAAC,GAAAA,EAAAC,SACAF,MAAAE,IACAJ,KAAAK,UAAAD,MCLA,SAAAE,gBAKA,OAJAC,SACAC,cAAA,mBACAP,aAAA,cAGA,IAAA,QACAQ,qBACA,MACA,IAAA,UACAC,uBACA,MACA,IAAA,QACAC,qBACA,MACA,IAAA,SACAC,uBAKAC,eAAAJ,2BACAK,IAAAC,YAAA,SAEA,MAAAC,EAAAT,SAAAC,cAAA,SACAS,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAC,OACAC,EAAAC,SAAAN,EAAAK,MAAAE,MAAA,GAAA,IAEA,IAAAC,MADAH,EAAAH,EACA,KASAO,YAAA,OAPA,GACA,CACAzD,WAAA,CACAC,QAAA,IAGA,YAIA2C,eAAAF,2BACAG,IAAAC,YAAA,SAEA,MAAAC,EAAAT,SAAAC,cAAA,SACAS,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAC,OACAC,EAAAC,SAAAN,EAAAK,MAAAE,MAAA,GAAA,IAEAG,EAAA,IAAAF,MADAH,EAAAH,EACA,KAEA,IAAAS,EAAA,GACAC,EAAA9D,OAAAW,UACAoD,EAAA,YACAH,EAAAD,YAAA,aAAAE,EAAAC,EAAAC,SACA,IAAAC,SAAAC,GAAAC,WAAAD,EAAA,OAEAH,EAAA9D,OAAAa,uBACAkD,EAAA,WACAH,EAAAD,YAAA,cAAAE,EAAAC,EAAAC,GAEAD,EAAA9D,OAAAc,2BACAiD,EAAA,cACAH,EAAAD,YAAA,kBAAAE,EAAAC,EAAAC,GAEAD,EAAA9D,OAAAe,yBACAgD,EAAA,WACAH,EAAAD,YAAA,gBAAAE,EAAAC,EAAAC,SACA,IAAAC,SAAAC,GAAAC,WAAAD,EAAA,OAEAH,EAAA9D,OAAAiB,oBACA8C,EAAA,yBACAH,EAAAD,YAAA,eAAAE,EAAAC,EAAAC,GAEAD,EAAA9D,OAAAkB,wBACA6C,EAAA,uBACAH,EAAAD,YAAA,mBAAAE,EAAAC,EAAAC,GAEAD,EAAA9D,OAAAmB,sBACA4C,EAAA,kCACAH,EAAAD,YAAA,iBAAAE,EAAAC,EAAAC,GAGAjB,eAAAH,6BACAI,IAAAC,YAAA,SAEA,MAAAC,EAAAT,SAAAC,cAAA,SACAS,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAC,OACAC,EAAAC,SAAAN,EAAAK,MAAAE,MAAA,GAAA,IAGAG,GAFAJ,SAAAN,EAAA9C,OAAAqD,MAAA,GAAA,IAEA,IAAAC,MADAH,EAAAH,EACA,MAEA,IAAAS,EAAA,GACAC,EAAA9D,OAAAC,QACA8D,EAAA,WACAH,EAAAD,YAAA,gBAAAE,EAAAC,EAAAC,SACA,IAAAC,SAAAC,GAAAC,WAAAD,EAAA,OAEAJ,EAAA,CACAM,cAAA,GAEAL,EAAA9D,OAAAP,OACAsE,EAAA,iBACAH,EAAAD,YAAA,eAAAE,EAAAC,EAAAC,GAEAD,EAAA9D,OAAAH,OACAkE,EAAA,aACAH,EAAAD,YAAA,eAAAE,EAAAC,EAAAC,GAEAD,EAAA9D,OAAAF,OACAiE,EAAA,YACAH,EAAAD,YAAA,eAAAE,EAAAC,EAAAC,GAGAjB,eAAAD,4BACAE,IAAAC,YAAA,SAEA,MAAAY,EAAA,IAAAF,MAAA,IAAA,KACAU,EAAA,IAEA,IAAAP,EAAA,GACAC,EAAA9D,OAAAoB,SACA2C,EAAA,SACAH,EAAAS,cAAA,YAAAR,EAAAC,EAAAC,SACA,IAAAC,SAAAC,GAAAC,WAAAD,EAAAG,KACAL,EAAA,oBACAH,EAAAS,cAAA,UAAAR,EAAAC,EAAAC,SACA,IAAAC,SAAAC,GAAAC,WAAAD,EAAAG,KACAL,EAAA,2BACAH,EAAAS,cAAA,UAAAR,EAAAC,EAAAC,SACA,IAAAC,SAAAC,GAAAC,WAAAD,EAAAG,KACAL,EAAA,YACAH,EAAAS,cAAA,UAAAR,EAAAC,EAAAC,SACA,IAAAC,SAAAC,GAAAC,WAAAD,EAAAG,KACAL,EAAA,gBACAH,EAAAS,cAAA,mBAAAR,EAAAC,EAAAC,GD/HAO,eAAAC,OAAA,aAAA3C,SCZA4C,OAAAC,OAAAlC,cCAA,MAAAmB,MAAA,MACA5B,YAAA4C,EAAAC,GACA1C,KAAA2C,KAAAF,EACAzC,KAAA4C,IAAAF,EAGA7C,YAAAgD,EAAAjB,EAAAC,EAAAC,GACA,IAAAvB,SAAAuC,iBAAAD,IAAAE,SAAAC,IACA,MAAAC,EAAAD,EAAAE,WAAA,SACAD,EAAAE,OAAA7B,MAAA2B,EAAAE,OAAA7B,MAAAtB,KAAA4C,IAAA5C,KAAA2C,KACAM,EAAAE,OAAAhF,OAAA8E,EAAAE,OAAAhF,OAAA6B,KAAA4C,IAAA5C,KAAA2C,KAEA,MAAAS,EAAA,IAAAtC,IAAAmC,EAAArB,GACAwB,EAAAC,gBAAAxB,GACAuB,EAAAE,OACA,MAAAC,EAAAH,EAAAH,GAAAE,OAAAK,YACAC,EAAAlD,SAAAmD,cAAA,OACAD,EAAA3B,IAAAA,EACA2B,EAAAE,IAAAJ,EACAP,EAAAY,WACAC,gBAAAJ,MAIA5D,cAAAgD,EAAAjB,EAAAC,EAAAC,GACA,MAAAkB,EAAAzC,SAAAC,cAAAqC,GACAI,EAAAD,EAAAE,WAAA,SACAD,EAAAE,OAAA7B,MAAA2B,EAAAE,OAAA7B,MAAAtB,KAAA4C,IAAA5C,KAAA2C,KACAM,EAAAE,OAAAhF,OAAA8E,EAAAE,OAAAhF,OAAA6B,KAAA4C,IAAA5C,KAAA2C,KAEA,MAAAS,EAAA,IAAAtC,IAAAmC,EAAArB,GACAwB,EAAAC,gBAAAxB,GACAuB,EAAAE,OACA,MAAAC,EAAAH,EAAAH,GAAAE,OAAAK,UAAA,aAAA,IACAC,EAAAlD,SAAAmD,cAAA,OACAD,EAAAE,IAAAJ,EACA,MAAAO,EAAAd,EAAAY,WAGA,GAFAE,EAAAD,gBAAAJ,GAEAZ,EAAAkB,SAAA,UAOA,YANAN,EAAAjB,OAAA,KACAiB,EAAAG,WAAAA,WAAAI,QAAA,EACAzD,SAAAC,cAAAqC,EAAA,UAAAmB,QAAA,EACAzD,SAAAC,cAAAqC,EAAA,SAAAmB,QAAA,IAMA,MAAAb,EAAA5C,SAAAmD,cAAA,UACAP,EAAA7B,MAAA,IACA6B,EAAAhF,OAAA,IACA2F,EAAAG,YAAAd,GACA,MAAAe,EAAAf,EAAAD,WAAA,MAEAO,EAAAjB,OAAA,KACAiB,EAAAG,WAAAA,WAAAI,QAAA,EAEAnB,EAAAkB,SAAA,cACAxD,SAAAC,cAAAqC,EAAA,UAAAmB,QAAA,EACAzD,SAAAC,cAAAqC,EAAA,SAAAmB,QAAA,GAGAvC,MAAA0C,UAAAV,EAAAS,EAAArB,GACA,MAAAuB,EAAA7D,SAAAmD,cAAA,OAKA,GAJAU,EAAAtC,IAAAA,EACAsC,EAAAT,IAAAO,EAAAf,OAAAK,UAAA,YAAA,GACAM,EAAAD,gBAAAO,GAEAvB,EAAAkB,SAAA,QACA,OAGA,MAAAM,EAAA9D,SAAAmD,cAAA,OACAW,EAAAC,GAAA,SACAD,EAAAvC,IAAA,MACAuC,EAAAV,IAAA,iBACAG,EAAAG,YAAAI,GAEA,MAAAE,EAAAhE,SAAAmD,cAAA,OACAa,EAAAD,GAAA,SACAC,EAAAzC,IAAA,MACAyC,EAAAZ,IAAA,iBACAG,EAAAG,YAAAM,IAIA1E,iBAAA4D,EAAAS,EAAArB,GACAqB,EAAAM,UAAAf,EAAA,EAAA,GACAA,EAAAG,WAAAa,YAAAhB,GAEA,MAAAiB,EAAAR,EAAAS,aAAA,EAAA,EAAA,IAAA,KACAT,EAAAf,OAAAhF,OAAA,IACA,MAAAyG,EAAAF,EAAAnB,KAGAsB,EADAhC,EAAAkB,SAAA,cACA,EAAA,GACAe,EAAA,IAAAD,EAGAE,EAAA,GAEA,IAAA,IAAAC,EAAA,EAAAA,EAAA,IAAAA,GAAAH,EAAA,CACA,MAAAI,EAAA,GAGA,IAAA,IAAAC,EAAA,EAAAA,EAAA,MAAAA,EAAA,CACA,MAAAC,EAAA,GAAA,IAAAH,EAAAE,GACAD,EAAAG,KAAAR,EAAAO,IAIA,IAAA,IAAAD,EAAA,EAAAA,EAAA,MAAAA,EAAA,CACA,MAIAG,EAAA,GAJAJ,EAAAC,EAAA,GAIA,KAHAD,EAAAC,GACAD,EAAAC,EAAA,IAGAD,EAAAC,GAAA3D,SAAA8D,GAGAN,EAAAK,KAAAH,GAGA,MAAAK,EAAAC,GAAA7H,iBAAA,CAAA6H,IAAA,GAAAlG,KAAAgG,GAAA9D,SAAA,IAAA8D,KACAG,EAAAjG,IACA,CAAAyC,EAAAzC,EAAA,GAAAkG,EAAAlG,EAAA,GAAAmG,EAAAnG,EAAA,KAGAoG,EAAAH,EAAAF,EAAA,YACAM,EAAAJ,EAAAF,EAAA,YAEAG,EAAA,CACAD,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,aAEA3D,EAAA,CAAA,EAAA,IAAA,GAAA,KAAA,IAAA,GAAA,IAAAtC,KAAAgG,GAAA,IAAAA,IACAQ,EAAA,IAAAC,MAAA,QAEA,IAAA,IAAAb,EAAA,EAAAA,EAAAH,IAAAG,EACA,IAAA,IAAAC,EAAA,EAAAA,EAAA,MAAAA,EAAA,CACA,MAAAa,EAAAhB,EAAAE,GAAAC,GACA/G,EAAA4H,GAAA,GAAAd,EAAAH,GACAkB,EAAA7H,EAAA4H,EACAE,EAAApD,EAAAkB,SAAA,UAGA,IAAA,IAAAiB,EAAA,EAAAA,GAAA7G,IAAA6G,EAAA,CAEA,MAAAkB,EAAAlB,EAAAH,EAAA,GAAAC,EAAAG,GAEA,IAGAkB,EAHA5G,EAAA,KAAAuF,EAAAG,GAAAJ,EAAA,IACAtF,EAAA,EAAAA,EAAA,IACAA,GAAA,IAEA,MAAA6G,EAAApB,EAAAgB,EAGA,IAAAC,GAAA,IAAAjB,EAAA,CACAmB,EAAAV,EAAA,GAEA,IAAA,IAAAY,EAAA,EAAAA,EAAAxB,EAAA,IAAAwB,EAAA,CACA,MAAAlB,EAAA,GAAA,KAAA,KAAAe,EAAAG,IAAAnB,GACAW,EAAAV,GAAA1D,MAAA6E,KAAAH,EAAAnE,EAAA2D,EAAA3D,EAAAzC,GACAsG,EAAAV,EAAA,GAAA1D,MAAA6E,KAAAH,EAAAV,EAAAE,EAAAF,EAAAlG,GACAsG,EAAAV,EAAA,GAAA1D,MAAA6E,KAAAH,EAAAT,EAAAC,EAAAD,EAAAnG,GACAsG,EAAAV,EAAA,GAAA,IAGA,SAIAgB,EAAA1E,MAAA8E,UAAAH,EAAAX,EAAA9D,GAGAsE,IAEAE,EADAnB,EAAA7G,EAAA,EACAyH,EAEAH,EAAAA,EAAApE,OAAA,IAIA,MAAA8D,EAAA,GAAA,KAAA,IAAAe,GAAAhB,GACAW,EAAAV,GAAA1D,MAAA6E,KAAAH,EAAAnE,EAAA2D,EAAA3D,EAAAzC,GACAsG,EAAAV,EAAA,GAAA1D,MAAA6E,KAAAH,EAAAV,EAAAE,EAAAF,EAAAlG,GACAsG,EAAAV,EAAA,GAAA1D,MAAA6E,KAAAH,EAAAT,EAAAC,EAAAD,EAAAnG,GACAsG,EAAAV,EAAA,GAAA,KAKAT,EAAAnB,KAAAiD,IAAAX,GACA3B,EAAAuC,aAAA/B,EAAA,EAAAG,EAAA,EAAA,KAGAhF,iBAAA6G,EAAAjB,EAAA9D,GACA,GAAA+E,GAAA/E,EAAA,GACA,OAAA8D,EAAA,GAGA,IAAA,IAAAN,EAAA,EAAAA,EAAAM,EAAApE,SAAA8D,EACA,GAAAuB,GAAA/E,EAAAwD,GAAA,CACA,MAAAI,GAAAmB,EAAA/E,EAAAwD,EAAA,KAAAxD,EAAAwD,GAAAxD,EAAAwD,EAAA,IACA,OAAA1D,MAAAkF,UAAAlB,EAAAN,EAAA,GAAAM,EAAAN,GAAAI,GAIA,OAAAE,EAAAA,EAAApE,OAAA,GAGAxB,iBAAA+G,EAAAC,EAAAC,GAIA,MAAA,CAAA9E,EAHAP,MAAA6E,KAAAM,EAAA5E,EAAA6E,EAAA7E,EAAA8E,GAGArB,EAFAhE,MAAA6E,KAAAM,EAAAnB,EAAAoB,EAAApB,EAAAqB,GAEApB,EADAjE,MAAA6E,KAAAM,EAAAlB,EAAAmB,EAAAnB,EAAAoB,IAIAjH,YAAAkH,EAAAC,EAAAF,GACA,OAAA,EAAAA,GAAAC,EAAAD,EAAAE,ICjOAlG,IAAA,MACAjB,YAAAoH,EAAA,KAAArF,EAAA,MACAqF,GAAA9D,OACAnD,KAAAiD,GAAAgE,EACA,OAAAA,GACAC,QAAAC,MAAA,mCAGAnH,KAAA4B,QAAA,CACAwF,SAAAxF,GAAAwF,WAAA,EACAlF,aAAAN,GAAAM,eAAA,GAIArC,MAAAyE,GACAtE,KAAAiD,GAAA1C,SAAA8G,eAAA/C,IAAApB,WAAA,SAEAlD,KAAAiD,IACAiE,QAAAC,MAAA,uBAAA7C,MAIAzE,SAAAyH,GACAtH,KAAAiD,GAAA1C,SAAAgH,uBAAAD,GAAA,IAAApE,WAAA,SAEAlD,KAAAiD,IACAiE,QAAAC,MAAA,0BAAAG,MAIAzH,yBAAA2H,EAAAC,EAAA,SAAAC,EAAA,YACA,MAAAC,QAAA3H,KAAA4H,WAAAJ,EAAAC,EAAAC,GACA5G,IAAA+G,iBAAA,IAAAF,GAGA9H,gBAAAgC,EAAA,KAAAiG,GAAA,GACA,IAAA9H,KAAAiD,GAMA,YALAiE,QAAAC,MACA,6EAOA,MAAAY,EAAA,GAEAD,GACAC,EAAA9J,WAAA6C,IAAAkH,YACAD,EAAAtJ,UAAAqC,IAAAmH,aAEAF,EAAA9J,WAAA+B,KAAAkI,cAAArG,GAAA5D,YACA8J,EAAAtJ,UAAAoD,GAAApD,WAAAqC,IAAAmH,YAGAjI,KAAAiD,GAAAE,OAAA7B,MAAAyG,EAAA9J,WAAAqD,MACAtB,KAAAiD,GAAAE,OAAAhF,OAAA4J,EAAA9J,WAAAE,OACA6B,KAAAiD,GAAAkF,SAAA,EAAA,EAAAnI,KAAAiD,GAAAE,OAAA7B,MAAAtB,KAAAiD,GAAAE,OAAAhF,QAEA,MAAAuJ,EAAA5G,IAAAsH,kBACAtH,IAAA+G,iBAAAH,SACAK,GAGA/H,KAAAqI,gBAAA,GACArI,KAAAqI,gBAAAX,SAAA5G,IAAAwH,aACAtI,KAAAiD,GACAjD,KAAAiD,GAAAsF,gBACAb,GAGA1H,KAAAqI,gBAAAZ,OAAA3G,IAAAwH,aACAtI,KAAAiD,GACAjD,KAAAiD,GAAAuF,cACA1H,IAAA+G,iBAAAJ,QAIA5H,OACA,MAAA4I,EAAA3H,IAAA4H,cACA1I,KAAAiD,GACAjD,KAAAqI,gBAAAZ,OACAzH,KAAAqI,gBAAAX,UAGAiB,EAAA3I,KAAAiD,GAAA2F,eACA5I,KAAAiD,GAAA4F,WAAA7I,KAAAiD,GAAA6F,aAAAH,GACA3I,KAAAiD,GAAA8F,WACA/I,KAAAiD,GAAA6F,aACA,IAAAE,aAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IACAhJ,KAAAiD,GAAAgG,aAGA,MAAAC,EAAAlJ,KAAAiD,GAAAkG,kBACAV,EACA,YAEAzI,KAAAiD,GAAAmG,oBACAF,EACA,EACAlJ,KAAAiD,GAAAoG,MACArJ,KAAAiD,GAAAqG,MACA,EAAAN,aAAAO,kBACA,GAEAvJ,KAAAiD,GAAAuG,wBAAAN,GAEAlJ,KAAAiD,GAAAwG,WAAAhB,GACAzI,KAAAiD,GAAAyG,WAAA1J,KAAAiD,GAAA0G,aAAA,EAAA,GACA3J,KAAAiD,GAAAwG,WAAA,MAGA5J,yBAAA+J,EAAA/H,GACA,IAAA,MAAAgI,KAAAhI,EACA,OAAAgI,GACA,IAAA,YACAD,EAAA9I,IAAAgJ,mBAAAF,EAAA/H,EAAApD,WACA,MACA,IAAA,aACAmL,EAAA9I,IAAAiJ,oBAAAH,EAAA/H,EAAA5D,YAKA,OAAA2L,EAGA/J,cAAAgC,EAAA,MACA,IAAAmI,EACArI,EAEAE,EACAF,EAAA4D,IACA,IAAA0E,EAEA,GAAA1E,KAAA1D,EACAoI,EAAApI,EAAA0D,QACA,GAAAzE,IAAAoJ,QAAA3E,KAAA1D,EAEAoI,EAAApI,EAAAf,IAAAkJ,OAAAzE,SACA,GAAA,CAAA,QAAA,UAAAxB,SAAAwB,GACA,OAAAvF,KAAA4B,QAAAM,cAQAlC,KAAAiD,GAAAE,OAAAoC,GAIA,OAAA0E,GAAAnJ,IAAAkH,YAAAzC,KAGAyE,EAAA,IAAAG,gBAAA5H,OAAA6H,SAAAC,QACA1I,EAAA4D,IAEA,IAAA0E,EAAAD,EAAAM,IAAA/E,IAAAyE,EAAAM,IAAAxJ,IAAAoJ,QAAA3E,IAEA,OAAA0E,IAIA,CAAA,QAAA,UAAAlG,SAAAwB,IACAvF,KAAA4B,QAAAM,cAQAlC,KAAAiD,GAAAE,OAAAoC,GAIAzE,IAAAkH,YAAAzC,MAIA,MAAAJ,EAAAE,GAAA9D,SAAA8D,GACAkF,EAAAlF,GAAAmF,WAAAnF,GACAK,EAAAH,GAAA,CAAA,EAAA,KAAA,EAAA,QAAAxB,SAAAwB,GAGA,IAAAkF,EAAAtF,EAAAxD,EAAA,WAAAY,OAAAmI,WACAxE,EAAAf,EAAAxD,EAAA,YAAAY,OAAAoI,YACA,MAAAC,EAAAlF,EAAA/D,EAAA,WAEAiJ,IAEAH,EAAAvE,EACAA,EAAAuE,EAEAA,EAAAvE,GAKA,MAAAhB,EAAAC,EAAAxD,EAAA,aAAAlC,KAAAoL,MAAApL,KAAAqL,SAAA,GAAA,IACA9F,EAAAG,EAAAxD,EAAA,aAAAlC,KAAAoL,MAAApL,KAAAqL,SAAA,GAAA,IAGA5M,EAAAwH,EAAA/D,EAAA,WACAvD,EAAAsH,EAAA/D,EAAA,eACA5C,EAAA2G,EAAA/D,EAAA,aACAtD,EAAA8G,EAAAxD,EAAA,SACArD,EAAA6G,EAAAxD,EAAA,YACAhD,EAAA4L,EAAA5I,EAAA,gBACApD,EAAAgM,EAAA5I,EAAA,cAGAnD,EAAA+L,EAAA5I,EAAA,UAEA1D,EAAA,CACAqD,MAAAmJ,EACAtM,OAAA+H,EACA6E,QAAA7F,EACA8F,QAAAhG,EACA4F,OAAAA,EACA1M,OAAAA,EACA+M,KAAA/M,EAAA,EAAA,EACAE,WAAAA,EACA8M,KAAA9M,EAAA,EAAA,EACAW,SAAAA,EACAoM,KAAApM,EAAA,EAAA,EACAV,KAAAA,EACAC,QAAAA,EACAK,YAAAmC,IAAAsK,kBAAAzM,GACAJ,UAAAuC,IAAAsK,kBAAA7M,GACAC,MAAAsC,IAAAsK,kBAAA5M,IAOA,OAJAwB,KAAA4B,QAAAwF,UACAF,QAAAmE,IAAAvK,IAAAwK,eAAArN,IAGAA,EAGA4B,sBAAA5B,GACA,IAAA+L,EAAA,GAEA,IAAA,MAAAuB,KAAAtN,EAAA,CACA,MAAA6I,EAAA7I,EAAAsN,GAGA,MAAAzE,GACA,QAAAA,GACAA,IAAAhG,IAAAkH,YAAAuD,IACAzE,IAAAhG,IAAAsK,kBAAAtK,IAAAkH,YAAAuD,KACA,MAAAzE,EAAA,IAKAkD,EAAA5E,KAAA,GAAAtE,IAAAoJ,QAAAqB,MAAAzE,KAGA,MAAA,IAAAkD,EAAAwB,KAAA,KAGA3L,2BAAA+J,EAAA3L,GACA,IAAA,MAAAsN,KAAAzK,IAAAkH,YACA4B,EAAAA,EAAApK,QACA,IAAA+L,KACAzK,IAAA2K,WAAAxN,EAAAsN,KAAAzK,IAAAkH,YAAAuD,IAIA,OAAA3B,EAGA/J,kBAAAiH,GACA,OAAA,MAAAA,IAAA4E,MAAA5E,IAAA,QAAAA,GAIAA,EAAA6E,WAGA9L,0BAAA+J,EAAAnL,GACA,IAAAmN,EAAA,GACAC,EAAA,GAEA,IAAA,IAAA1G,EAAA,EAAAA,EAAA1G,EAAAhB,OAAA4D,SAAA8D,EAAA,CACA,MAAA5F,EAAAd,EAAAhB,OAAA0H,GAAA9F,KAAA6F,GAAApE,IAAAsK,kBAAAlG,KACAvD,EAAAb,IAAAsK,kBAAA3M,EAAAd,UAAAwH,IACAyG,GAAA,OAAAzG,aAAA5F,EAAA,OAAAA,EAAA,OAAAA,EAAA,eACAsM,GAAA,OAAA1G,QAAAxD,SAOA,OAFAiI,GADAA,GADAA,EAAAA,EAAApK,QAAA,YAAAf,EAAAhB,OAAA4D,SACA7B,QAAA,WAAAoM,IACApM,QAAA,cAAAqM,GAKAhM,yBAAAiM,GACA,GAAAJ,MAAAI,GACA,MAAA,MAGA,IAAAnG,EAAAmG,EAAAH,WAGA,IAAAhG,EAAA5B,SAAA,KACA,OAAA4B,EAAA,IAGA,MAAAoG,EAAApG,EAAAvE,MAAA,KAGA,MAAA,MAAA2K,EAAA,GACApG,EAIA,IAAAoG,EAAA,GAGAlM,wBAAA2H,EAAAC,EAAAC,GACA,MAAAsE,EAAA,CAAAvE,EAAAC,GACAC,EAAA,GAEA,IAAA,MAAAsE,KAAAD,EACArE,EAAAsE,SAAAnL,IAAAoL,QAAA,GAAA1E,IAAAyE,UAGA,OAAAtE,EAGA9H,qBAAA2H,GACA,aAAAzH,MAAAyH,EAAA,CAAA2E,OAAA,SAAA/L,OAGAP,oBAAAoD,EAAAmJ,EAAAC,GACA,MAAAzC,EAAA3G,EAAAqF,aAAA8D,GACAnJ,EAAAqJ,aAAA1C,EAAAyC,GACApJ,EAAAsJ,cAAA3C,GAGA,GAFA3G,EAAAuJ,mBAAA5C,EAAA3G,EAAAwJ,gBAGA,OAAA7C,EAGA1C,QAAAmE,IAAAvK,IAAA4L,gBAAAL,IACAnF,QAAAC,MAAAlE,EAAA0J,iBAAA/C,IACA3G,EAAA2J,aAAAhD,GAGA/J,qBAAAoD,EAAA4J,EAAAC,GACA,MAAArE,EAAAxF,EAAAyF,gBACAzF,EAAA8J,aAAAtE,EAAAoE,GACA5J,EAAA8J,aAAAtE,EAAAqE,GACA7J,EAAA+J,YAAAvE,GAGA,GAFAxF,EAAAgK,oBAAAxE,EAAAxF,EAAAiK,aAGA,OAAAzE,EAGAvB,QAAAmE,IAAApI,EAAAkK,kBAAA1E,IACAxF,EAAAmK,cAAA3E,GAGA5I,uBAAAwM,GACA,OAAAA,EACAjL,MAAA,MACA/B,KAAA,CAAAgO,EAAAlI,IAAA,IAAA,MAAAA,GAAA3D,OAAA,OAAA6L,MACA7B,KAAA,QAKA1K,IAAA+G,iBAAA,GAGA/G,IAAAkH,YAAA,CACA1G,MAAA,IACAnD,OAAA,IACA4M,QAAA,EACAC,QAAA,EACAJ,QAAA,EACA1M,QAAA,EACAE,YAAA,EACAW,UAAA,EACAV,KAAA,IACAC,QAAA,EACAK,YAAA,GACAJ,UAAA,KACAC,MAAA,GAGAyM,KAAA,EACAC,KAAA,EACAC,KAAA,GAIArK,IAAAoJ,QAAA,CACA5I,MAAA,IACAnD,OAAA,IACA4M,QAAA,IACAC,QAAA,IACAJ,OAAA,KACA1M,OAAA,IACAE,WAAA,KACAW,SAAA,KACAV,KAAA,IACAC,QAAA,IACAK,YAAA,IACAJ,UAAA,IACAC,MAAA,MAIAsC,IAAAmH,WAAA,CACAxK,OAAA,CACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,MAEAE,UAAA,CAAA,EAAA,IAAA,GAAA,IAAA,IAAA,GAAA","file":"script.min.js","sourcesContent":["const HEIGHT = 800;\n\nconst GRADIENTS = {\n\tdesert: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#F1C673',\n\t\t\t'#EAAC4A',\n\t\t\t'#2B601D',\n\t\t\t'#F8DDA0',\n\t\t\t'#A6D5D3'\n\t\t]),\n\t\tpositions: [0, 0.6, 0.8, 0.85, 0.88]\n\t},\n\tforest: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#3B5D0D',\n\t\t\t'#13280A',\n\t\t\t'#8B754B',\n\t\t\t'#C8CBCC',\n\t\t\t'#FFFFFF'\n\t\t]),\n\t\tpositions: [0, 0.6, 0.8, 0.85, 0.99]\n\t},\n\tarctic: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#1B3983',\n\t\t\t'#264EB8',\n\t\t\t'#72C8FB',\n\t\t\t'#CCFDFF',\n\t\t\t'#EBFAFE',\n\t\t\t'#DDFFFF'\n\t\t]),\n\t\tpositions: [0, 0.01, 0.1, 0.2, 0.5, 0.99]\n\t},\n\toldMap: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#96A18B',\n\t\t\t'#596D5A',\n\t\t\t'#1D160B',\n\t\t\t'#AAA268',\n\t\t\t'#EBB468',\n\t\t\t'#959B5B',\n\t\t\t'#1D160B',\n\t\t\t'#51572A',\n\t\t\t'#51572A',\n\t\t\t'#1D160B',\n\t\t\t'#836E4B',\n\t\t\t'#E4CC95',\n\t\t\t'#8D775A',\n\t\t\t'#5e503b',\n\t\t\t'#CFCAA2'\n\t\t]),\n\t\tpositions: [\n\t\t\t0, 0.14, 0.16, 0.18, 0.25, 0.48, 0.49, 0.5, 0.51, 0.68, 0.69, 0.7,\n\t\t\t0.8, 0.9, 0.99, 1\n\t\t]\n\t}\n};\n\nconst CONFIG = {\n\tislands: {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t}\n\t},\n\tdesert: {\n\t\tattributes: {\n\t\t\theight: HEIGHT / 3,\n\t\t\thorizontal: true,\n\t\t\tmass: 500,\n\t\t\toctaves: 5,\n\t\t\tfrequency: 0.0025,\n\t\t\twater: 0.45\n\t\t},\n\t\tgradients: GRADIENTS.desert\n\t},\n\tforest: {\n\t\tattributes: {\n\t\t\theight: HEIGHT,\n\t\t\thorizontal: true,\n\t\t\twater: 0.4\n\t\t},\n\t\tgradients: GRADIENTS.forest\n\t},\n\tarctic: {\n\t\tattributes: {\n\t\t\theight: HEIGHT,\n\t\t\thorizontal: true,\n\t\t\tradial: true,\n\t\t\tmass: 300,\n\t\t\tfrequency: 0.0025\n\t\t},\n\t\tgradients: GRADIENTS.arctic\n\t},\n\tguide_top: {\n\t\tattributes: {\n\t\t\tmass: 1000,\n\t\t\tpersistence: 0.55,\n\t\t\tfrequency: 0.001,\n\t\t\twater: 0.4\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_radial: {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_horizontal: {\n\t\tattributes: {\n\t\t\thorizontal: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_vertical: {\n\t\tattributes: {\n\t\t\tvertical: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_octaves: {\n\t\tattributes: {\n\t\t\toctaves: 3\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_persistence: {\n\t\tattributes: {\n\t\t\tpersistence: 0.8\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_frequency: {\n\t\tattributes: {\n\t\t\tfrequency: 0.05\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tpostcard: {\n\t\tattributes: {\n\t\t\tradial: true,\n\t\t\tmass: 60,\n\t\t\toctaves: 4,\n\t\t\tfrequency: 0.0035\n\t\t},\n\t\tgradients: {\n\t\t\tcolors: [\n\t\t\t\t[0, 0, 0],\n\t\t\t\t[1, 1, 1]\n\t\t\t],\n\t\t\tpositions: [0, 1]\n\t\t}\n\t}\n};\n\nfunction hexArrayToColors(arr) {\n\tarr = arr.map(hex => {\n\t\tconst c = hex.replace('#', '0x');\n\t\treturn [\n\t\t\t((c >> 16) & 255) / 255,\n\t\t\t((c >> 8) & 255) / 255,\n\t\t\t(c & 255) / 255\n\t\t].map(c => Math.round(c * 100) / 100);\n\t});\n\n\treturn arr;\n}\n","class LogoTag extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tconnectedCallback() {\n\t\tfetch(this.getAttribute('src'))\n\t\t\t.then(response => response.text())\n\t\t\t.then(text => {\n\t\t\t\tthis.innerHTML = text;\n\t\t\t});\n\t}\n}\n\ncustomElements.define('custom-svg', LogoTag);\n","'use strict';\n\nwindow.onload = paintCanvases;\n\nfunction paintCanvases() {\n\tconst page = document\n\t\t.querySelector('meta[data-page]')\n\t\t.getAttribute('data-page');\n\n\tswitch (page) {\n\t\tcase 'index':\n\t\t\tpaintIndexCanvases();\n\t\t\tbreak;\n\t\tcase 'gallery':\n\t\t\tpaintGalleryCanvases();\n\t\t\tbreak;\n\t\tcase 'guide':\n\t\t\tpaintGuideCanvases();\n\t\t\tbreak;\n\t\tcase 'travel':\n\t\t\tpaintTravelCanvases();\n\t\t\tbreak;\n\t}\n}\n\nasync function paintIndexCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 100);\n\n\tlet options = {};\n\tlet config = {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t}\n\t};\n\tlet alt = 'おそらく島の写真';\n\tp.makeUmiImgs('.umi', options, config, alt);\n}\n\nasync function paintGuideCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 200);\n\n\tlet options = {};\n\tlet config = CONFIG.guide_top;\n\tlet alt = '手描き地図風の地形';\n\tp.makeUmiImgs('#guide-top', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 250));\n\n\tconfig = CONFIG.guide_direction_radial;\n\talt = '手描き地図風の島';\n\tp.makeUmiImgs('#dir-radial', options, config, alt);\n\n\tconfig = CONFIG.guide_direction_horizontal;\n\talt = '手描き地図風の水平地形';\n\tp.makeUmiImgs('#dir-horizontal', options, config, alt);\n\n\tconfig = CONFIG.guide_direction_vertical;\n\talt = 'おそらく島の写真';\n\tp.makeUmiImgs('#dir-vertical', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 150));\n\n\tconfig = CONFIG.guide_noise_octaves;\n\talt = '手描きの地図のスタイルの非常にシンプルな地形';\n\tp.makeUmiImgs('#noi-octaves', options, config, alt);\n\n\tconfig = CONFIG.guide_noise_persistence;\n\talt = '手描きの地図のスタイルの非常に詳細な地形';\n\tp.makeUmiImgs('#noi-persistence', options, config, alt);\n\n\tconfig = CONFIG.guide_noise_frequency;\n\talt = '手描きの地図のように細かく細かい島々が並ぶ、非常に断片的な世界';\n\tp.makeUmiImgs('#noi-frequency', options, config, alt);\n}\n\nasync function paintGalleryCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst gridHeight = parseInt(style.height.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 200);\n\n\tlet options = {};\n\tlet config = CONFIG.islands;\n\tlet alt = 'おそらく島の写真';\n\tp.makeUmiImgs('.islands .umi', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 250));\n\n\toptions = {\n\t\toverrideSize: true\n\t};\n\tconfig = CONFIG.desert;\n\talt = 'おそらく砂漠のオアシスの写真';\n\tp.makeUmiImgs('.desert .umi', options, config, alt);\n\n\tconfig = CONFIG.forest;\n\talt = 'おそらく山岳林の写真';\n\tp.makeUmiImgs('.forest .umi', options, config, alt);\n\n\tconfig = CONFIG.arctic;\n\talt = 'おそらく氷山の写真';\n\tp.makeUmiImgs('.arctic .umi', options, config, alt);\n}\n\nasync function paintTravelCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst p = new Paint(256, 100);\n\tconst sleep = 750;\n\n\tlet options = {};\n\tlet config = CONFIG.postcard;\n\tlet alt = '島々の絵葉書';\n\tp.makeUmiCanvas('#postcard', options, config, alt);\n\tawait new Promise(r => setTimeout(r, sleep));\n\talt = 'レイヤードアイランドのレンダリング';\n\tp.makeUmiCanvas('#skip-1', options, config, alt);\n\tawait new Promise(r => setTimeout(r, sleep));\n\talt = '色を使わないレイヤード・アイランド・レンダリング';\n\tp.makeUmiCanvas('#skip-2', options, config, alt);\n\tawait new Promise(r => setTimeout(r, sleep));\n\talt = 'ノイズレンダリング';\n\tp.makeUmiCanvas('#skip-3', options, config, alt);\n\tawait new Promise(r => setTimeout(r, sleep));\n\talt = '3Dアイランドレンダリング';\n\tp.makeUmiCanvas('#special-3d-skip', options, config, alt);\n}\n","'use strict';\n\nconst Paint = class {\n\tconstructor(fractionalSize, pixelsPerCell) {\n\t\tthis.frac = fractionalSize;\n\t\tthis.ppc = pixelsPerCell;\n\t}\n\n\tmakeUmiImgs(selector, options, config, alt) {\n\t\t[...document.querySelectorAll(selector)].forEach(e => {\n\t\t\tconst gl = e.getContext('webgl');\n\t\t\tgl.canvas.width = (gl.canvas.width / this.ppc) * this.frac;\n\t\t\tgl.canvas.height = (gl.canvas.height / this.ppc) * this.frac;\n\n\t\t\tconst umi = new Umi(gl, options);\n\t\t\tumi.configureShader(config);\n\t\t\tumi.draw();\n\t\t\tconst data = umi.gl.canvas.toDataURL();\n\t\t\tconst img = document.createElement('img');\n\t\t\timg.alt = alt;\n\t\t\timg.src = data;\n\t\t\tconst parent = e.parentNode;\n\t\t\tparent.replaceChildren(img);\n\t\t});\n\t}\n\n\tmakeUmiCanvas(selector, options, config, alt) {\n\t\tconst e = document.querySelector(selector);\n\t\tconst gl = e.getContext('webgl');\n\t\tgl.canvas.width = (gl.canvas.width / this.ppc) * this.frac;\n\t\tgl.canvas.height = (gl.canvas.height / this.ppc) * this.frac;\n\n\t\tconst umi = new Umi(gl, options);\n\t\tumi.configureShader(config);\n\t\tumi.draw();\n\t\tconst data = umi.gl.canvas.toDataURL('image/jpeg', 0.2);\n\t\tconst img = document.createElement('img');\n\t\timg.src = data;\n\t\tconst parent = e.parentNode;\n\t\tparent.replaceChildren(img);\n\n\t\tif (selector.includes('skip-3')) {\n\t\t\timg.onload = () => {\n\t\t\t\timg.parentNode.parentNode.hidden = false;\n\t\t\t\tdocument.querySelector(selector + '-arrow').hidden = false;\n\t\t\t\tdocument.querySelector(selector + '-text').hidden = false;\n\t\t\t};\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = 256;\n\t\tcanvas.height = 256;\n\t\tparent.appendChild(canvas);\n\t\tconst ctx = canvas.getContext('2d');\n\n\t\timg.onload = () => {\n\t\t\timg.parentNode.parentNode.hidden = false;\n\n\t\t\tif (!selector.includes('postcard')) {\n\t\t\t\tdocument.querySelector(selector + '-arrow').hidden = false;\n\t\t\t\tdocument.querySelector(selector + '-text').hidden = false;\n\t\t\t}\n\n\t\t\tPaint.construct(img, ctx, selector);\n\t\t\tconst resImg = document.createElement('img');\n\t\t\tresImg.alt = alt;\n\t\t\tresImg.src = ctx.canvas.toDataURL('image/png', 0);\n\t\t\tparent.replaceChildren(resImg);\n\n\t\t\tif (selector.includes('skip')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst branch = document.createElement('img');\n\t\t\tbranch.id = 'branch';\n\t\t\tbranch.alt = '桜の枝';\n\t\t\tbranch.src = 'img/branch.png';\n\t\t\tparent.appendChild(branch);\n\n\t\t\tconst sakura = document.createElement('img');\n\t\t\tsakura.id = 'sakura';\n\t\t\tsakura.alt = '桜の花';\n\t\t\tsakura.src = 'img/sakura.png';\n\t\t\tparent.appendChild(sakura);\n\t\t};\n\t}\n\n\tstatic construct(img, ctx, selector) {\n\t\tctx.drawImage(img, 0, 0);\n\t\timg.parentNode.removeChild(img);\n\n\t\tconst imageData = ctx.getImageData(0, 0, 256, 256);\n\t\tctx.canvas.height = 128;\n\t\tconst iData = imageData.data;\n\n\t\tconst special3d = selector.includes('special-3d');\n\t\tconst everyN = special3d ? 2 : 16;\n\t\tconst nLayers = 256 / everyN;\n\n\t\t// nLayers x 256\n\t\tconst heights = [];\n\n\t\tfor (let y = 0; y < 256; y += everyN) {\n\t\t\tconst line = [];\n\n\t\t\t// Copy\n\t\t\tfor (let x = 0; x < 256; ++x) {\n\t\t\t\tconst i = (y * 256 + x) * 4;\n\t\t\t\tline.push(iData[i]);\n\t\t\t}\n\n\t\t\t// Smoothing\n\t\t\tfor (let x = 1; x < 255; ++x) {\n\t\t\t\tconst a = line[x - 1];\n\t\t\t\tconst b = line[x];\n\t\t\t\tconst c = line[x + 1];\n\n\t\t\t\tconst n = 0.7 * a + 0.15 * (b + c);\n\t\t\t\tline[x] = parseInt(n);\n\t\t\t}\n\n\t\t\theights.push(line);\n\t\t}\n\n\t\tconst ftoi = s => hexArrayToColors([s])[0].map(n => parseInt(n * 255));\n\t\tconst rgb = c => {\n\t\t\treturn { r: c[0], g: c[1], b: c[2] };\n\t\t};\n\n\t\tconst f = rgb(ftoi('#f98d27'));\n\t\tconst border = rgb(ftoi('#555555'));\n\t\tconst doBorder = false;\n\t\tconst g = [\n\t\t\trgb(ftoi('#0a51ad')),\n\t\t\trgb(ftoi('#3a82d3')),\n\t\t\trgb(ftoi('#9be2fc')),\n\t\t\trgb(ftoi('#bfa572')),\n\t\t\trgb(ftoi('#4f7223')),\n\t\t\trgb(ftoi('#b5ba77')),\n\t\t\trgb(ftoi('#efede8'))\n\t\t];\n\t\tconst p = [0, 0.15, 0.2, 0.205, 0.25, 0.7, 0.8].map(n => n * 255);\n\t\tconst result = new Array(128 * 256 * 4);\n\n\t\tfor (let line = 0; line < nLayers; ++line) {\n\t\t\tfor (let x = 0; x < 256; ++x) {\n\t\t\t\tconst hlx = heights[line][x];\n\t\t\t\tconst height = hlx * ((0.5 * line) / nLayers);\n\t\t\t\tconst ratio = height / hlx;\n\t\t\t\tconst skip2 = selector.includes('skip-2');\n\n\t\t\t\t// Pixel height data to vertical line\n\t\t\t\tfor (let y = 0; y <= height; ++y) {\n\t\t\t\t\t// Set initial height higher for each layer\n\t\t\t\t\tconst h = y + (nLayers - line) * (everyN / 2);\n\n\t\t\t\t\tlet c = 255 - (nLayers - line) * everyN * 0.75;\n\t\t\t\t\tc = 1 - c / 255;\n\t\t\t\t\tc /= 1.5;\n\t\t\t\t\tlet col;\n\t\t\t\t\tconst yr = y / ratio;\n\n\t\t\t\t\t// Water\n\t\t\t\t\tif (!skip2 && y === 0) {\n\t\t\t\t\t\tcol = g[0];\n\n\t\t\t\t\t\tfor (let fill = 0; fill < everyN / 2; ++fill) {\n\t\t\t\t\t\t\tconst i = ((255 - (h + fill)) * 256 + x) * 4;\n\t\t\t\t\t\t\tresult[i] = Paint.lerp(col.r, f.r, c);\n\t\t\t\t\t\t\tresult[i + 1] = Paint.lerp(col.g, f.g, c);\n\t\t\t\t\t\t\tresult[i + 2] = Paint.lerp(col.b, f.b, c);\n\t\t\t\t\t\t\tresult[i + 3] = 255;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (doBorder && yr > p[2] && y >= height - 2) {\n\t\t\t\t\t\tcol = border;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcol = Paint.pickColor(yr, g, p);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (skip2) {\n\t\t\t\t\t\tif (y > height - 2) {\n\t\t\t\t\t\t\tcol = border;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcol = g[g.length - 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst i = ((255 - h) * 256 + x) * 4;\n\t\t\t\t\tresult[i] = Paint.lerp(col.r, f.r, c);\n\t\t\t\t\tresult[i + 1] = Paint.lerp(col.g, f.g, c);\n\t\t\t\t\tresult[i + 2] = Paint.lerp(col.b, f.b, c);\n\t\t\t\t\tresult[i + 3] = 255;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\timageData.data.set(result);\n\t\tctx.putImageData(imageData, 0, -128 + everyN / 2);\n\t}\n\n\tstatic pickColor(v, g, p) {\n\t\tif (v <= p[0]) {\n\t\t\treturn g[0];\n\t\t}\n\n\t\tfor (let i = 1; i < g.length; ++i) {\n\t\t\tif (v <= p[i]) {\n\t\t\t\tconst s = (v - p[i - 1]) / (p[i] - p[i - 1]);\n\t\t\t\treturn Paint.lerpColor(g[i - 1], g[i], s);\n\t\t\t}\n\t\t}\n\n\t\treturn g[g.length - 1];\n\t}\n\n\tstatic lerpColor(colA, colB, value) {\n\t\tconst r = Paint.lerp(colA.r, colB.r, value);\n\t\tconst g = Paint.lerp(colA.g, colB.g, value);\n\t\tconst b = Paint.lerp(colA.b, colB.b, value);\n\t\treturn { r: r, g: g, b: b };\n\t}\n\n\tstatic lerp(start, end, value) {\n\t\treturn (1 - value) * start + value * end;\n\t}\n};\n","'use strict';\n\nconst Umi = class {\n\tconstructor(context = null, options = null) {\n\t\tif (context?.canvas) {\n\t\t\tthis.gl = context;\n\t\t} else if (context !== null) {\n\t\t\tconsole.error('Invalid context, expected WebGL');\n\t\t}\n\n\t\tthis.options = {\n\t\t\tlogQuery: options?.logQuery ?? false,\n\t\t\toverrideSize: options?.overrideSize ?? false\n\t\t};\n\t}\n\n\tuseId(id) {\n\t\tthis.gl = document.getElementById(id)?.getContext('webgl');\n\n\t\tif (!this.gl) {\n\t\t\tconsole.error(`Could not find id: '${id}'`);\n\t\t}\n\t}\n\n\tuseClass(name) {\n\t\tthis.gl = document.getElementsByClassName(name)[0]?.getContext('webgl');\n\n\t\tif (!this.gl) {\n\t\t\tconsole.error(`Could not find class: '${name}'`);\n\t\t}\n\t}\n\n\tstatic async loadShaders(path, vertex = 'vertex', fragment = 'fragment') {\n\t\tconst shaders = await this.getShaders(path, vertex, fragment);\n\t\tUmi._shadersTemplate = { ...shaders };\n\t}\n\n\tconfigureShader(config = null, useDefault = false) {\n\t\tif (!this.gl) {\n\t\t\tconsole.error(\n\t\t\t\t'WebGL context not set.' +\n\t\t\t\t\t'Try useId(id) or useClass(name) before running this'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst sc = {};\n\n\t\tif (useDefault) {\n\t\t\tsc.attributes = Umi._attributes;\n\t\t\tsc.gradients = Umi._gradients;\n\t\t} else {\n\t\t\tsc.attributes = this.getAttributes(config?.attributes);\n\t\t\tsc.gradients = config?.gradients || Umi._gradients;\n\t\t}\n\n\t\tthis.gl.canvas.width = sc.attributes.width;\n\t\tthis.gl.canvas.height = sc.attributes.height;\n\t\tthis.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n\t\tconst fragment = Umi.configureFragment(\n\t\t\tUmi._shadersTemplate.fragment,\n\t\t\tsc\n\t\t);\n\n\t\tthis.shadersCompiled = {};\n\t\tthis.shadersCompiled.fragment = Umi.createShader(\n\t\t\tthis.gl,\n\t\t\tthis.gl.FRAGMENT_SHADER,\n\t\t\tfragment\n\t\t);\n\n\t\tthis.shadersCompiled.vertex = Umi.createShader(\n\t\t\tthis.gl,\n\t\t\tthis.gl.VERTEX_SHADER,\n\t\t\tUmi._shadersTemplate.vertex\n\t\t);\n\t}\n\n\tdraw() {\n\t\tconst program = Umi.createProgram(\n\t\t\tthis.gl,\n\t\t\tthis.shadersCompiled.vertex,\n\t\t\tthis.shadersCompiled.fragment\n\t\t);\n\n\t\tconst positionBuffer = this.gl.createBuffer();\n\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\n\t\tthis.gl.bufferData(\n\t\t\tthis.gl.ARRAY_BUFFER,\n\t\t\tnew Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]),\n\t\t\tthis.gl.STATIC_DRAW\n\t\t);\n\n\t\tconst positionAttributeLocation = this.gl.getAttribLocation(\n\t\t\tprogram,\n\t\t\t'Position'\n\t\t);\n\t\tthis.gl.vertexAttribPointer(\n\t\t\tpositionAttributeLocation,\n\t\t\t2,\n\t\t\tthis.gl.FLOAT,\n\t\t\tthis.gl.FALSE,\n\t\t\t2 * Float32Array.BYTES_PER_ELEMENT,\n\t\t\t0\n\t\t);\n\t\tthis.gl.enableVertexAttribArray(positionAttributeLocation);\n\n\t\tthis.gl.useProgram(program);\n\t\tthis.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, 4);\n\t\tthis.gl.useProgram(null);\n\t}\n\n\tstatic configureFragment(shader, config) {\n\t\tfor (const option in config) {\n\t\t\tswitch (option) {\n\t\t\t\tcase 'gradients':\n\t\t\t\t\tshader = Umi.setShaderGradients(shader, config.gradients);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'attributes':\n\t\t\t\t\tshader = Umi.setShaderAttributes(shader, config.attributes);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\tgetAttributes(config = null) {\n\t\tlet params;\n\t\tlet p;\n\n\t\tif (config) {\n\t\t\tp = s => {\n\t\t\t\tlet res;\n\n\t\t\t\tif (s in config) {\n\t\t\t\t\tres = config[s];\n\t\t\t\t} else if (Umi._params[s] in config) {\n\t\t\t\t\t// Short attribute name is used\n\t\t\t\t\tres = config[Umi.params[s]];\n\t\t\t\t} else if (['width', 'height'].includes(s)) {\n\t\t\t\t\tif (this.options.overrideSize) {\n\t\t\t\t\t\t// Attribute not overridden, but we don't\n\t\t\t\t\t\t// want the default value\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attribute not overridden, but we want\n\t\t\t\t\t// the existing size attribute\n\t\t\t\t\treturn this.gl.canvas[s];\n\t\t\t\t}\n\n\t\t\t\t// Fallback to default if nullish\n\t\t\t\treturn res ?? Umi._attributes[s];\n\t\t\t};\n\t\t} else {\n\t\t\tparams = new URLSearchParams(window.location.search);\n\t\t\tp = s => {\n\t\t\t\t// Either long or short attribute name is used\n\t\t\t\tlet res = params.get(s) ?? params.get(Umi._params[s]);\n\n\t\t\t\tif (res) {\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\n\t\t\t\tif (['width', 'height'].includes(s)) {\n\t\t\t\t\tif (this.options.overrideSize) {\n\t\t\t\t\t\t// Attribute not overridden, but we don't\n\t\t\t\t\t\t// want the default value\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attribute not overridden, but we want\n\t\t\t\t\t// the existing size attribute\n\t\t\t\t\treturn this.gl.canvas[s];\n\t\t\t\t}\n\n\t\t\t\t// Fallback to default\n\t\t\t\treturn Umi._attributes[s];\n\t\t\t};\n\t\t}\n\n\t\tconst i = n => parseInt(n);\n\t\tconst d = n => parseFloat(n);\n\t\tconst b = s => [1, '1', true, 'true'].includes(s);\n\n\t\t// Width and height\n\t\tlet w = i(p('width')) || window.innerWidth;\n\t\tlet h = i(p('height')) || window.innerHeight;\n\t\tconst square = b(p('square'));\n\n\t\tif (square) {\n\t\t\t// Force square using the shortest side\n\t\t\tif (w < h) {\n\t\t\t\th = w;\n\t\t\t} else {\n\t\t\t\tw = h;\n\t\t\t}\n\t\t}\n\n\t\t// Seed\n\t\tconst x = i(p('offsetx')) || Math.floor(Math.random() * 2 ** 20);\n\t\tconst y = i(p('offsety')) || Math.floor(Math.random() * 2 ** 20);\n\n\t\t// World generation\n\t\tconst radial = b(p('radial'));\n\t\tconst horizontal = b(p('horizontal'));\n\t\tconst vertical = b(p('vertical'));\n\t\tconst mass = i(p('mass'));\n\t\tconst octaves = i(p('octaves'));\n\t\tconst persistence = d(p('persistence'));\n\t\tconst frequency = d(p('frequency'));\n\n\t\t// Water level\n\t\tconst water = d(p('water'));\n\n\t\tconst attributes = {\n\t\t\twidth: w,\n\t\t\theight: h,\n\t\t\toffsetx: x,\n\t\t\toffsety: y,\n\t\t\tsquare: square,\n\t\t\tradial: radial,\n\t\t\t_rad: radial ? 1 : 0,\n\t\t\thorizontal: horizontal,\n\t\t\t_hor: horizontal ? 1 : 0,\n\t\t\tvertical: vertical,\n\t\t\t_ver: vertical ? 1 : 0,\n\t\t\tmass: mass,\n\t\t\toctaves: octaves,\n\t\t\tpersistence: Umi.formatShaderFloat(persistence),\n\t\t\tfrequency: Umi.formatShaderFloat(frequency),\n\t\t\twater: Umi.formatShaderFloat(water)\n\t\t};\n\n\t\tif (this.options.logQuery) {\n\t\t\tconsole.log(Umi.joinAttributes(attributes));\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tstatic joinAttributes(attributes) {\n\t\tlet params = [];\n\n\t\tfor (const a in attributes) {\n\t\t\tconst value = attributes[a];\n\n\t\t\tif (\n\t\t\t\tvalue == null ||\n\t\t\t\tvalue === 'NaN' ||\n\t\t\t\tvalue === Umi._attributes[a] ||\n\t\t\t\tvalue === Umi.formatShaderFloat(Umi._attributes[a]) ||\n\t\t\t\tvalue[0] === '_'\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tparams.push(`${Umi._params[a]}=${value}`);\n\t\t}\n\n\t\treturn '?' + params.join('&');\n\t}\n\n\tstatic setShaderAttributes(shader, attributes) {\n\t\tfor (const a in Umi._attributes) {\n\t\t\tshader = shader.replace(\n\t\t\t\t`%${a}%`,\n\t\t\t\tUmi.getIfValid(attributes[a]) || Umi._attributes[a]\n\t\t\t);\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\tstatic getIfValid(value) {\n\t\tif (value == null || isNaN(value) || value === 'NaN') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn value.toString();\n\t}\n\n\tstatic setShaderGradients(shader, gradients) {\n\t\tlet colorsCode = '';\n\t\tlet positionsCode = '';\n\n\t\tfor (let i = 0; i < gradients.colors.length; ++i) {\n\t\t\tconst c = gradients.colors[i].map(x => Umi.formatShaderFloat(x));\n\t\t\tconst p = Umi.formatShaderFloat(gradients.positions[i]);\n\t\t\tcolorsCode += `COL[${i}] = vec4(${c[0]}, ${c[1]}, ${c[2]}, 1.);\\n\\t`;\n\t\t\tpositionsCode += `POS[${i}] = ${p};\\n\\t`;\n\t\t}\n\n\t\tshader = shader.replace(/%ncolors%/, gradients.colors.length);\n\t\tshader = shader.replace(/%colors%/, colorsCode);\n\t\tshader = shader.replace(/%positions%/, positionsCode);\n\n\t\treturn shader;\n\t}\n\n\tstatic formatShaderFloat(number) {\n\t\tif (isNaN(number)) {\n\t\t\treturn 'NaN';\n\t\t}\n\n\t\tlet f = number.toString();\n\n\t\t// Number is an integer\n\t\tif (!f.includes('.')) {\n\t\t\treturn f + '.';\n\t\t}\n\n\t\tconst components = f.split('.');\n\n\t\t// Number doesn't start with a zero\n\t\tif (components[0] !== '0') {\n\t\t\treturn f;\n\t\t}\n\n\t\t// Number starts with a zero\n\t\treturn '.' + components[1];\n\t}\n\n\tstatic async getShaders(path, vertex, fragment) {\n\t\tconst shaderFiles = [vertex, fragment];\n\t\tconst shaders = {};\n\n\t\tfor (const file of shaderFiles) {\n\t\t\tshaders[file] = await Umi.getFile(`${path}${file}.glsl`);\n\t\t}\n\n\t\treturn shaders;\n\t}\n\n\tstatic async getFile(path) {\n\t\treturn (await fetch(path, { method: 'GET' })).text();\n\t}\n\n\tstatic createShader(gl, type, source) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, source);\n\t\tgl.compileShader(shader);\n\t\tconst success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n\t\tif (success) {\n\t\t\treturn shader;\n\t\t}\n\n\t\tconsole.log(Umi.enumerateSource(source));\n\t\tconsole.error(gl.getShaderInfoLog(shader));\n\t\tgl.deleteShader(shader);\n\t}\n\n\tstatic createProgram(gl, vertexShader, fragmentShader) {\n\t\tconst program = gl.createProgram();\n\t\tgl.attachShader(program, vertexShader);\n\t\tgl.attachShader(program, fragmentShader);\n\t\tgl.linkProgram(program);\n\t\tconst success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n\t\tif (success) {\n\t\t\treturn program;\n\t\t}\n\n\t\tconsole.log(gl.getProgramInfoLog(program));\n\t\tgl.deleteProgram(program);\n\t}\n\n\tstatic enumerateSource(source) {\n\t\treturn source\n\t\t\t.split('\\n')\n\t\t\t.map((row, i) => `${('   ' + i).slice(-3)}: ${row}`)\n\t\t\t.join('\\n');\n\t}\n};\n\nUMI_STATIC_PROPERTIES: {\n\tUmi._shadersTemplate = {};\n\n\t// Shader attributes with default values\n\tUmi._attributes = {\n\t\twidth: 256, // int\n\t\theight: 256, // int\n\t\toffsetx: 0, // int\n\t\toffsety: 0, // int\n\t\tsquare: false, // bool\n\t\tradial: false, // bool\n\t\thorizontal: false, // bool\n\t\tvertical: false, // bool\n\t\tmass: 150, // int\n\t\toctaves: 6, // int\n\t\tpersistence: 0.6, // float\n\t\tfrequency: 0.005, // float\n\t\twater: 0.5, // float\n\n\t\t// These are implicit\n\t\t_rad: 0,\n\t\t_hor: 0,\n\t\t_ver: 0\n\t};\n\n\t// Alternative shorter param names\n\tUmi._params = {\n\t\twidth: 'w',\n\t\theight: 'h',\n\t\toffsetx: 'x',\n\t\toffsety: 'y',\n\t\tsquare: 'sq',\n\t\tradial: 'r',\n\t\thorizontal: 'hz',\n\t\tvertical: 'vt',\n\t\tmass: 'm',\n\t\toctaves: 'o',\n\t\tpersistence: 'p',\n\t\tfrequency: 'f',\n\t\twater: 'wt'\n\t};\n\n\t// Default gradients\n\tUmi._gradients = {\n\t\tcolors: [\n\t\t\t[0.04, 0.32, 0.68], // #0a51ad\n\t\t\t[0.23, 0.51, 0.83], // #3a82d3\n\t\t\t[0.61, 0.89, 0.99], // #9be2fc\n\t\t\t[0.75, 0.65, 0.45], // #bfa572\n\t\t\t[0.31, 0.45, 0.14], // #4f7223\n\t\t\t[0.71, 0.73, 0.47], // #b5ba77\n\t\t\t[0.94, 0.93, 0.91] // #efede8\n\t\t],\n\t\tpositions: [0, 0.15, 0.2, 0.24, 0.33, 0.7, 0.8]\n\t};\n}\n"]}