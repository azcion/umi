{"version":3,"sources":["config.js","logo-tag.js","page.js","umi.js"],"names":["HEIGHT","GRADIENTS","desert","colors","hexArrayToColors","positions","forest","arctic","oldMap","CONFIG","islands","attributes","radial","height","horizontal","mass","octaves","frequency","water","gradients","guide_top","persistence","guide_direction_radial","guide_direction_horizontal","guide_direction_vertical","vertical","guide_noise_octaves","guide_noise_persistence","guide_noise_frequency","arr","map","hex","c","replace","Math","round","LogoTag","HTMLElement","[object Object]","super","fetch","this","getAttribute","then","response","text","innerHTML","paintCanvases","document","querySelector","paintIndexCanvases","paintGalleryCanvases","paintGuideCanvases","customElements","define","window","onload","Paint","fractionalSize","pixelsPerCell","frac","ppc","selector","options","config","alt","querySelectorAll","forEach","e","gl","getContext","canvas","width","umi","Umi","configureShader","draw","data","toDataURL","img","createElement","src","parentNode","replaceChildren","async","loadShaders","grid","style","getComputedStyle","nColumns","split","length","parseInt","slice","makeUmiImgs","p","Promise","r","setTimeout","overrideSize","context","console","error","logQuery","id","getElementById","name","getElementsByClassName","path","vertex","fragment","shaders","getShaders","_shadersTemplate","useDefault","sc","_attributes","_gradients","getAttributes","viewport","configureFragment","shadersCompiled","createShader","FRAGMENT_SHADER","VERTEX_SHADER","program","createProgram","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionAttributeLocation","getAttribLocation","vertexAttribPointer","FLOAT","FALSE","BYTES_PER_ELEMENT","enableVertexAttribArray","useProgram","drawArrays","TRIANGLE_FAN","shader","option","setShaderGradients","setShaderAttributes","params","s","res","_params","includes","URLSearchParams","location","search","get","i","n","d","parseFloat","b","w","innerWidth","h","innerHeight","square","x","floor","random","y","offsetx","offsety","_rad","_hor","_ver","formatShaderFloat","log","joinAttributes","a","value","push","join","getIfValid","isNaN","toString","colorsCode","positionsCode","number","f","components","shaderFiles","file","getFile","method","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","enumerateSource","getShaderInfoLog","deleteShader","vertexShader","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","row"],"mappings":"AAAA,MAAAA,OAAA,IAEAC,UAAA,CACAC,OAAA,CACAC,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,GAAA,GAAA,IAAA,MAEAC,OAAA,CACAH,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,GAAA,GAAA,IAAA,MAEAE,OAAA,CACAJ,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,IAAA,GAAA,GAAA,GAAA,MAEAG,OAAA,CACAL,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CACA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GACA,GAAA,GAAA,IAAA,KAKAI,OAAA,CACAC,QAAA,CACAC,WAAA,CACAC,QAAA,IAGAV,OAAA,CACAS,WAAA,CACAE,OAnEA,IAmEA,EACAC,YAAA,EACAC,KAAA,IACAC,QAAA,EACAC,UAAA,MACAC,MAAA,KAEAC,UAAAlB,UAAAC,QAEAI,OAAA,CACAK,WAAA,CACAE,OA9EA,IA+EAC,YAAA,EACAI,MAAA,IAEAC,UAAAlB,UAAAK,QAEAC,OAAA,CACAI,WAAA,CACAE,OAtFA,IAuFAC,YAAA,EACAF,QAAA,EACAG,KAAA,IACAE,UAAA,OAEAE,UAAAlB,UAAAM,QAEAa,UAAA,CACAT,WAAA,CACAI,KAAA,IACAM,YAAA,IACAJ,UAAA,KACAC,MAAA,IAEAC,UAAAlB,UAAAO,QAEAc,uBAAA,CACAX,WAAA,CACAC,QAAA,GAEAO,UAAAlB,UAAAO,QAEAe,2BAAA,CACAZ,WAAA,CACAG,YAAA,GAEAK,UAAAlB,UAAAO,QAEAgB,yBAAA,CACAb,WAAA,CACAc,UAAA,GAEAN,UAAAlB,UAAAO,QAEAkB,oBAAA,CACAf,WAAA,CACAK,QAAA,GAEAG,UAAAlB,UAAAO,QAEAmB,wBAAA,CACAhB,WAAA,CACAU,YAAA,IAEAF,UAAAlB,UAAAO,QAEAoB,sBAAA,CACAjB,WAAA,CACAM,UAAA,KAEAE,UAAAlB,UAAAO,SAIA,SAAAJ,iBAAAyB,GAUA,OATAA,EAAAA,EAAAC,KAAAC,IACA,MAAAC,EAAAD,EAAAE,QAAA,IAAA,MACA,MAAA,EACAD,GAAA,GAAA,KAAA,KACAA,GAAA,EAAA,KAAA,KACA,IAAAA,GAAA,KACAF,KAAAE,GAAAE,KAAAC,MAAA,IAAAH,GAAA,SCpJA,MAAAI,gBAAAC,YACAC,cACAC,QAGAD,oBACAE,MAAAC,KAAAC,aAAA,QACAC,MAAAC,GAAAA,EAAAC,SACAF,MAAAE,IACAJ,KAAAK,UAAAD,MCLA,SAAAE,gBAKA,OAJAC,SACAC,cAAA,mBACAP,aAAA,cAGA,IAAA,QACAQ,qBACA,MACA,IAAA,UACAC,uBACA,MACA,IAAA,QACAC,sBDHAC,eAAAC,OAAA,aAAAlB,SCZAmB,OAAAC,OAAAT,cAoBA,MAAAU,MAAA,MACAnB,YAAAoB,EAAAC,GACAlB,KAAAmB,KAAAF,EACAjB,KAAAoB,IAAAF,EAGArB,YAAAwB,EAAAC,EAAAC,EAAAC,GACA,IAAAjB,SAAAkB,iBAAAJ,IAAAK,SAAAC,IACA,MAAAC,EAAAD,EAAAE,WAAA,SACAD,EAAAE,OAAAC,MAAAH,EAAAE,OAAAC,MAAA/B,KAAAoB,IAAApB,KAAAmB,KACAS,EAAAE,OAAA1D,OAAAwD,EAAAE,OAAA1D,OAAA4B,KAAAoB,IAAApB,KAAAmB,KAEA,MAAAa,EAAA,IAAAC,IAAAL,EAAAN,GACAU,EAAAE,gBAAAX,GACAS,EAAAG,OACA,MAAAC,EAAAJ,EAAAJ,GAAAE,OAAAO,YACAC,EAAA/B,SAAAgC,cAAA,OACAD,EAAAd,IAAAA,EACAc,EAAAE,IAAAJ,EACAT,EAAAc,WACAC,gBAAAJ,QAKAK,eAAAlC,2BACAwB,IAAAW,YAAA,SAEA,MAAAC,EAAAtC,SAAAC,cAAA,SACAsC,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAC,OACAnB,EAAAoB,SAAAL,EAAAf,MAAAqB,MAAA,GAAA,IAEA,IAAApC,MADAe,EAAAiB,EACA,KASAK,YAAA,OAPA,GACA,CACAnF,WAAA,CACAC,QAAA,IAGA,YAIAwE,eAAAhC,2BACAsB,IAAAW,YAAA,SAEA,MAAAC,EAAAtC,SAAAC,cAAA,SACAsC,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAC,OACAnB,EAAAoB,SAAAL,EAAAf,MAAAqB,MAAA,GAAA,IAEAE,EAAA,IAAAtC,MADAe,EAAAiB,EACA,KAEA,IAAA1B,EAAA,GACAC,EAAAvD,OAAAW,UACA6C,EAAA,YACA8B,EAAAD,YAAA,aAAA/B,EAAAC,EAAAC,SACA,IAAA+B,SAAAC,GAAAC,WAAAD,EAAA,OAEAjC,EAAAvD,OAAAa,uBACA2C,EAAA,WACA8B,EAAAD,YAAA,cAAA/B,EAAAC,EAAAC,GAEAD,EAAAvD,OAAAc,2BACA0C,EAAA,cACA8B,EAAAD,YAAA,kBAAA/B,EAAAC,EAAAC,GAEAD,EAAAvD,OAAAe,yBACAyC,EAAA,WACA8B,EAAAD,YAAA,gBAAA/B,EAAAC,EAAAC,SACA,IAAA+B,SAAAC,GAAAC,WAAAD,EAAA,OAEAjC,EAAAvD,OAAAiB,oBACAuC,EAAA,yBACA8B,EAAAD,YAAA,eAAA/B,EAAAC,EAAAC,GAEAD,EAAAvD,OAAAkB,wBACAsC,EAAA,uBACA8B,EAAAD,YAAA,mBAAA/B,EAAAC,EAAAC,GAEAD,EAAAvD,OAAAmB,sBACAqC,EAAA,kCACA8B,EAAAD,YAAA,iBAAA/B,EAAAC,EAAAC,GAGAmB,eAAAjC,6BACAuB,IAAAW,YAAA,SAEA,MAAAC,EAAAtC,SAAAC,cAAA,SACAsC,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAC,OACAnB,EAAAoB,SAAAL,EAAAf,MAAAqB,MAAA,GAAA,IAGAE,GAFAH,SAAAL,EAAA1E,OAAAgF,MAAA,GAAA,IAEA,IAAApC,MADAe,EAAAiB,EACA,MAEA,IAAA1B,EAAA,GACAC,EAAAvD,OAAAC,QACAuD,EAAA,WACA8B,EAAAD,YAAA,gBAAA/B,EAAAC,EAAAC,SACA,IAAA+B,SAAAC,GAAAC,WAAAD,EAAA,OAEAlC,EAAA,CACAoC,cAAA,GAEAnC,EAAAvD,OAAAP,OACA+D,EAAA,iBACA8B,EAAAD,YAAA,eAAA/B,EAAAC,EAAAC,GAEAD,EAAAvD,OAAAH,OACA2D,EAAA,aACA8B,EAAAD,YAAA,eAAA/B,EAAAC,EAAAC,GAEAD,EAAAvD,OAAAF,OACA0D,EAAA,YACA8B,EAAAD,YAAA,eAAA/B,EAAAC,EAAAC,GCzIA,MAAAS,IAAA,MACApC,YAAA8D,EAAA,KAAArC,EAAA,MACAqC,GAAA7B,OACA9B,KAAA4B,GAAA+B,EACA,OAAAA,GACAC,QAAAC,MAAA,mCAGA7D,KAAAsB,QAAA,CACAwC,SAAAxC,GAAAwC,WAAA,EACAJ,aAAApC,GAAAoC,eAAA,GAIA7D,MAAAkE,GACA/D,KAAA4B,GAAArB,SAAAyD,eAAAD,IAAAlC,WAAA,SAEA7B,KAAA4B,IACAgC,QAAAC,MAAA,uBAAAE,MAIAlE,SAAAoE,GACAjE,KAAA4B,GAAArB,SAAA2D,uBAAAD,GAAA,IAAApC,WAAA,SAEA7B,KAAA4B,IACAgC,QAAAC,MAAA,0BAAAI,MAIApE,yBAAAsE,EAAAC,EAAA,SAAAC,EAAA,YACA,MAAAC,QAAAtE,KAAAuE,WAAAJ,EAAAC,EAAAC,GACApC,IAAAuC,iBAAA,IAAAF,GAGAzE,gBAAA0B,EAAA,KAAAkD,GAAA,GACA,IAAAzE,KAAA4B,GAMA,YALAgC,QAAAC,MACA,6EAOA,MAAAa,EAAA,GAEAD,GACAC,EAAAxG,WAAA+D,IAAA0C,YACAD,EAAAhG,UAAAuD,IAAA2C,aAEAF,EAAAxG,WAAA8B,KAAA6E,cAAAtD,GAAArD,YACAwG,EAAAhG,UAAA6C,GAAA7C,WAAAuD,IAAA2C,YAGA5E,KAAA4B,GAAAE,OAAAC,MAAA2C,EAAAxG,WAAA6D,MACA/B,KAAA4B,GAAAE,OAAA1D,OAAAsG,EAAAxG,WAAAE,OACA4B,KAAA4B,GAAAkD,SAAA,EAAA,EAAA9E,KAAA4B,GAAAE,OAAAC,MAAA/B,KAAA4B,GAAAE,OAAA1D,QAEA,MAAAiG,EAAApC,IAAA8C,kBACA9C,IAAAuC,iBAAAH,SACAK,GAGA1E,KAAAgF,gBAAA,GACAhF,KAAAgF,gBAAAX,SAAApC,IAAAgD,aACAjF,KAAA4B,GACA5B,KAAA4B,GAAAsD,gBACAb,GAGArE,KAAAgF,gBAAAZ,OAAAnC,IAAAgD,aACAjF,KAAA4B,GACA5B,KAAA4B,GAAAuD,cACAlD,IAAAuC,iBAAAJ,QAIAvE,OACA,MAAAuF,EAAAnD,IAAAoD,cACArF,KAAA4B,GACA5B,KAAAgF,gBAAAZ,OACApE,KAAAgF,gBAAAX,UAGAiB,EAAAtF,KAAA4B,GAAA2D,eACAvF,KAAA4B,GAAA4D,WAAAxF,KAAA4B,GAAA6D,aAAAH,GACAtF,KAAA4B,GAAA8D,WACA1F,KAAA4B,GAAA6D,aACA,IAAAE,aAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IACA3F,KAAA4B,GAAAgE,aAGA,MAAAC,EAAA7F,KAAA4B,GAAAkE,kBACAV,EACA,YAEApF,KAAA4B,GAAAmE,oBACAF,EACA,EACA7F,KAAA4B,GAAAoE,MACAhG,KAAA4B,GAAAqE,MACA,EAAAN,aAAAO,kBACA,GAEAlG,KAAA4B,GAAAuE,wBAAAN,GAEA7F,KAAA4B,GAAAwE,WAAAhB,GACApF,KAAA4B,GAAAyE,WAAArG,KAAA4B,GAAA0E,aAAA,EAAA,GACAtG,KAAA4B,GAAAwE,WAAA,MAGAvG,yBAAA0G,EAAAhF,GACA,IAAA,MAAAiF,KAAAjF,EACA,OAAAiF,GACA,IAAA,YACAD,EAAAtE,IAAAwE,mBAAAF,EAAAhF,EAAA7C,WACA,MACA,IAAA,aACA6H,EAAAtE,IAAAyE,oBAAAH,EAAAhF,EAAArD,YAKA,OAAAqI,EAGA1G,cAAA0B,EAAA,MACA,IAAAoF,EACArD,EAEA/B,EACA+B,EAAAsD,IACA,IAAAC,EAEA,GAAAD,KAAArF,EACAsF,EAAAtF,EAAAqF,QACA,GAAA3E,IAAA6E,QAAAF,KAAArF,EAEAsF,EAAAtF,EAAAU,IAAA0E,OAAAC,SACA,GAAA,CAAA,QAAA,UAAAG,SAAAH,GACA,OAAA5G,KAAAsB,QAAAoC,cAQA1D,KAAA4B,GAAAE,OAAA8E,GAIA,OAAAC,GAAA5E,IAAA0C,YAAAiC,KAGAD,EAAA,IAAAK,gBAAAlG,OAAAmG,SAAAC,QACA5D,EAAAsD,IAEA,IAAAC,EAAAF,EAAAQ,IAAAP,IAAAD,EAAAQ,IAAAlF,IAAA6E,QAAAF,IAEA,OAAAC,IAIA,CAAA,QAAA,UAAAE,SAAAH,IACA5G,KAAAsB,QAAAoC,cAQA1D,KAAA4B,GAAAE,OAAA8E,GAIA3E,IAAA0C,YAAAiC,MAIA,MAAAQ,EAAAC,GAAAlE,SAAAkE,GACAC,EAAAD,GAAAE,WAAAF,GACAG,EAAAZ,GAAA,CAAA,EAAA,KAAA,EAAA,QAAAG,SAAAH,GAGA,IAAAa,EAAAL,EAAA9D,EAAA,WAAAxC,OAAA4G,WACAC,EAAAP,EAAA9D,EAAA,YAAAxC,OAAA8G,YACA,MAAAC,EAAAL,EAAAlE,EAAA,WAEAuE,IAEAJ,EAAAE,EACAA,EAAAF,EAEAA,EAAAE,GAKA,MAAAG,EAAAV,EAAA9D,EAAA,aAAA7D,KAAAsI,MAAAtI,KAAAuI,SAAA,GAAA,IACAC,EAAAb,EAAA9D,EAAA,aAAA7D,KAAAsI,MAAAtI,KAAAuI,SAAA,GAAA,IAGA7J,EAAAqJ,EAAAlE,EAAA,WACAjF,EAAAmJ,EAAAlE,EAAA,eACAtE,EAAAwI,EAAAlE,EAAA,aACAhF,EAAA8I,EAAA9D,EAAA,SACA/E,EAAA6I,EAAA9D,EAAA,YACA1E,EAAA0I,EAAAhE,EAAA,gBACA9E,EAAA8I,EAAAhE,EAAA,cAGA7E,EAAA6I,EAAAhE,EAAA,UAEApF,EAAA,CACA6D,MAAA0F,EACArJ,OAAAuJ,EACAO,QAAAJ,EACAK,QAAAF,EACAJ,OAAAA,EACA1J,OAAAA,EACAiK,KAAAjK,EAAA,EAAA,EACAE,WAAAA,EACAgK,KAAAhK,EAAA,EAAA,EACAW,SAAAA,EACAsJ,KAAAtJ,EAAA,EAAA,EACAV,KAAAA,EACAC,QAAAA,EACAK,YAAAqD,IAAAsG,kBAAA3J,GACAJ,UAAAyD,IAAAsG,kBAAA/J,GACAC,MAAAwD,IAAAsG,kBAAA9J,IAOA,OAJAuB,KAAAsB,QAAAwC,UACAF,QAAA4E,IAAAvG,IAAAwG,eAAAvK,IAGAA,EAGA2B,sBAAA3B,GACA,IAAAyI,EAAA,GAEA,IAAA,MAAA+B,KAAAxK,EAAA,CACA,MAAAyK,EAAAzK,EAAAwK,GAGA,MAAAC,GACA,QAAAA,GACAA,IAAA1G,IAAA0C,YAAA+D,IACAC,IAAA1G,IAAAsG,kBAAAtG,IAAA0C,YAAA+D,KACA,MAAAC,EAAA,IAKAhC,EAAAiC,KAAA,GAAA3G,IAAA6E,QAAA4B,MAAAC,KAGA,MAAA,IAAAhC,EAAAkC,KAAA,KAGAhJ,2BAAA0G,EAAArI,GACA,IAAA,MAAAwK,KAAAzG,IAAA0C,YACA4B,EAAAA,EAAA/G,QACA,IAAAkJ,KACAzG,IAAA6G,WAAA5K,EAAAwK,KAAAzG,IAAA0C,YAAA+D,IAIA,OAAAnC,EAGA1G,kBAAA8I,GACA,OAAA,MAAAA,IAAAI,MAAAJ,IAAA,QAAAA,GAIAA,EAAAK,WAGAnJ,0BAAA0G,EAAA7H,GACA,IAAAuK,EAAA,GACAC,EAAA,GAEA,IAAA,IAAA9B,EAAA,EAAAA,EAAA1I,EAAAhB,OAAAwF,SAAAkE,EAAA,CACA,MAAA7H,EAAAb,EAAAhB,OAAA0J,GAAA/H,KAAAyI,GAAA7F,IAAAsG,kBAAAT,KACAxE,EAAArB,IAAAsG,kBAAA7J,EAAAd,UAAAwJ,IACA6B,GAAA,OAAA7B,aAAA7H,EAAA,OAAAA,EAAA,OAAAA,EAAA,eACA2J,GAAA,OAAA9B,QAAA9D,SAOA,OAFAiD,GADAA,GADAA,EAAAA,EAAA/G,QAAA,YAAAd,EAAAhB,OAAAwF,SACA1D,QAAA,WAAAyJ,IACAzJ,QAAA,cAAA0J,GAKArJ,yBAAAsJ,GACA,GAAAJ,MAAAI,GACA,MAAA,MAGA,IAAAC,EAAAD,EAAAH,WAGA,IAAAI,EAAArC,SAAA,KACA,OAAAqC,EAAA,IAGA,MAAAC,EAAAD,EAAAnG,MAAA,KAGA,MAAA,MAAAoG,EAAA,GACAD,EAIA,IAAAC,EAAA,GAGAxJ,wBAAAsE,EAAAC,EAAAC,GACA,MAAAiF,EAAA,CAAAlF,EAAAC,GACAC,EAAA,GAEA,IAAA,MAAAiF,KAAAD,EACAhF,EAAAiF,SAAAtH,IAAAuH,QAAA,GAAArF,IAAAoF,UAGA,OAAAjF,EAGAzE,qBAAAsE,GACA,aAAApE,MAAAoE,EAAA,CAAAsF,OAAA,SAAArJ,OAGAP,oBAAA+B,EAAA8H,EAAAC,GACA,MAAApD,EAAA3E,EAAAqD,aAAAyE,GACA9H,EAAAgI,aAAArD,EAAAoD,GACA/H,EAAAiI,cAAAtD,GAGA,GAFA3E,EAAAkI,mBAAAvD,EAAA3E,EAAAmI,gBAGA,OAAAxD,EAGA3C,QAAA4E,IAAAvG,IAAA+H,gBAAAL,IACA/F,QAAAC,MAAAjC,EAAAqI,iBAAA1D,IACA3E,EAAAsI,aAAA3D,GAGA1G,qBAAA+B,EAAAuI,EAAAC,GACA,MAAAhF,EAAAxD,EAAAyD,gBACAzD,EAAAyI,aAAAjF,EAAA+E,GACAvI,EAAAyI,aAAAjF,EAAAgF,GACAxI,EAAA0I,YAAAlF,GAGA,GAFAxD,EAAA2I,oBAAAnF,EAAAxD,EAAA4I,aAGA,OAAApF,EAGAxB,QAAA4E,IAAA5G,EAAA6I,kBAAArF,IACAxD,EAAA8I,cAAAtF,GAGAvF,uBAAA8J,GACA,OAAAA,EACA1G,MAAA,MACA5D,KAAA,CAAAsL,EAAAvD,IAAA,IAAA,MAAAA,GAAAhE,OAAA,OAAAuH,MACA9B,KAAA,QAKA5G,IAAAuC,iBAAA,GAGAvC,IAAA0C,YAAA,CACA5C,MAAA,IACA3D,OAAA,IACA8J,QAAA,EACAC,QAAA,EACAN,QAAA,EACA1J,QAAA,EACAE,YAAA,EACAW,UAAA,EACAV,KAAA,IACAC,QAAA,EACAK,YAAA,GACAJ,UAAA,KACAC,MAAA,GAGA2J,KAAA,EACAC,KAAA,EACAC,KAAA,GAIArG,IAAA6E,QAAA,CACA/E,MAAA,IACA3D,OAAA,IACA8J,QAAA,IACAC,QAAA,IACAN,OAAA,KACA1J,OAAA,IACAE,WAAA,KACAW,SAAA,KACAV,KAAA,IACAC,QAAA,IACAK,YAAA,IACAJ,UAAA,IACAC,MAAA,MAIAwD,IAAA2C,WAAA,CACAlH,OAAA,CACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,MAEAE,UAAA,CAAA,EAAA,IAAA,GAAA,IAAA,IAAA,GAAA","file":"script.min.js","sourcesContent":["const HEIGHT = 800;\n\nconst GRADIENTS = {\n\tdesert: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#F1C673',\n\t\t\t'#EAAC4A',\n\t\t\t'#2B601D',\n\t\t\t'#F8DDA0',\n\t\t\t'#A6D5D3'\n\t\t]),\n\t\tpositions: [0, 0.6, 0.8, 0.85, 0.88]\n\t},\n\tforest: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#3B5D0D',\n\t\t\t'#13280A',\n\t\t\t'#8B754B',\n\t\t\t'#C8CBCC',\n\t\t\t'#FFFFFF'\n\t\t]),\n\t\tpositions: [0, 0.6, 0.8, 0.85, 0.99]\n\t},\n\tarctic: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#1B3983',\n\t\t\t'#264EB8',\n\t\t\t'#72C8FB',\n\t\t\t'#CCFDFF',\n\t\t\t'#EBFAFE',\n\t\t\t'#DDFFFF'\n\t\t]),\n\t\tpositions: [0, 0.01, 0.1, 0.2, 0.5, 0.99]\n\t},\n\toldMap: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#96A18B',\n\t\t\t'#596D5A',\n\t\t\t'#1D160B',\n\t\t\t'#AAA268',\n\t\t\t'#EBB468',\n\t\t\t'#959B5B',\n\t\t\t'#1D160B',\n\t\t\t'#51572A',\n\t\t\t'#51572A',\n\t\t\t'#1D160B',\n\t\t\t'#836E4B',\n\t\t\t'#E4CC95',\n\t\t\t'#8D775A',\n\t\t\t'#5e503b',\n\t\t\t'#CFCAA2'\n\t\t]),\n\t\tpositions: [\n\t\t\t0, 0.14, 0.16, 0.18, 0.25, 0.48, 0.49, 0.5, 0.51, 0.68, 0.69, 0.7,\n\t\t\t0.8, 0.9, 0.99, 1\n\t\t]\n\t}\n};\n\nconst CONFIG = {\n\tislands: {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t}\n\t},\n\tdesert: {\n\t\tattributes: {\n\t\t\theight: HEIGHT / 3,\n\t\t\thorizontal: true,\n\t\t\tmass: 500,\n\t\t\toctaves: 5,\n\t\t\tfrequency: 0.0025,\n\t\t\twater: 0.45\n\t\t},\n\t\tgradients: GRADIENTS.desert\n\t},\n\tforest: {\n\t\tattributes: {\n\t\t\theight: HEIGHT,\n\t\t\thorizontal: true,\n\t\t\twater: 0.4\n\t\t},\n\t\tgradients: GRADIENTS.forest\n\t},\n\tarctic: {\n\t\tattributes: {\n\t\t\theight: HEIGHT,\n\t\t\thorizontal: true,\n\t\t\tradial: true,\n\t\t\tmass: 300,\n\t\t\tfrequency: 0.0025\n\t\t},\n\t\tgradients: GRADIENTS.arctic\n\t},\n\tguide_top: {\n\t\tattributes: {\n\t\t\tmass: 1000,\n\t\t\tpersistence: 0.55,\n\t\t\tfrequency: 0.001,\n\t\t\twater: 0.4\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_radial: {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_horizontal: {\n\t\tattributes: {\n\t\t\thorizontal: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_vertical: {\n\t\tattributes: {\n\t\t\tvertical: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_octaves: {\n\t\tattributes: {\n\t\t\toctaves: 3\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_persistence: {\n\t\tattributes: {\n\t\t\tpersistence: 0.8\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_frequency: {\n\t\tattributes: {\n\t\t\tfrequency: 0.05\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t}\n};\n\nfunction hexArrayToColors(arr) {\n\tarr = arr.map(hex => {\n\t\tconst c = hex.replace('#', '0x');\n\t\treturn [\n\t\t\t((c >> 16) & 255) / 255,\n\t\t\t((c >> 8) & 255) / 255,\n\t\t\t(c & 255) / 255\n\t\t].map(c => Math.round(c * 100) / 100);\n\t});\n\n\treturn arr;\n}\n","class LogoTag extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tconnectedCallback() {\n\t\tfetch(this.getAttribute('src'))\n\t\t\t.then(response => response.text())\n\t\t\t.then(text => {\n\t\t\t\tthis.innerHTML = text;\n\t\t\t});\n\t}\n}\n\ncustomElements.define('custom-svg', LogoTag);\n","'use strict';\n\nwindow.onload = paintCanvases;\n\nfunction paintCanvases() {\n\tconst page = document\n\t\t.querySelector('meta[data-page]')\n\t\t.getAttribute('data-page');\n\n\tswitch (page) {\n\t\tcase 'index':\n\t\t\tpaintIndexCanvases();\n\t\t\tbreak;\n\t\tcase 'gallery':\n\t\t\tpaintGalleryCanvases();\n\t\t\tbreak;\n\t\tcase 'guide':\n\t\t\tpaintGuideCanvases();\n\t\t\tbreak;\n\t}\n}\n\nconst Paint = class {\n\tconstructor(fractionalSize, pixelsPerCell) {\n\t\tthis.frac = fractionalSize;\n\t\tthis.ppc = pixelsPerCell;\n\t}\n\n\tmakeUmiImgs(selector, options, config, alt) {\n\t\t[...document.querySelectorAll(selector)].forEach(e => {\n\t\t\tconst gl = e.getContext('webgl');\n\t\t\tgl.canvas.width = (gl.canvas.width / this.ppc) * this.frac;\n\t\t\tgl.canvas.height = (gl.canvas.height / this.ppc) * this.frac;\n\n\t\t\tconst umi = new Umi(gl, options);\n\t\t\tumi.configureShader(config);\n\t\t\tumi.draw();\n\t\t\tconst data = umi.gl.canvas.toDataURL();\n\t\t\tconst img = document.createElement('img');\n\t\t\timg.alt = alt;\n\t\t\timg.src = data;\n\t\t\tconst parent = e.parentNode;\n\t\t\tparent.replaceChildren(img);\n\t\t});\n\t}\n};\n\nasync function paintIndexCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 200);\n\n\tlet options = {};\n\tlet config = {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t}\n\t};\n\tlet alt = 'おそらく島の写真';\n\tp.makeUmiImgs('.umi', options, config, alt);\n}\n\nasync function paintGuideCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 200);\n\n\tlet options = {};\n\tlet config = CONFIG.guide_top;\n\tlet alt = '手描き地図風の地形';\n\tp.makeUmiImgs('#guide-top', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 250));\n\n\tconfig = CONFIG.guide_direction_radial;\n\talt = '手描き地図風の島';\n\tp.makeUmiImgs('#dir-radial', options, config, alt);\n\n\tconfig = CONFIG.guide_direction_horizontal;\n\talt = '手描き地図風の水平地形';\n\tp.makeUmiImgs('#dir-horizontal', options, config, alt);\n\n\tconfig = CONFIG.guide_direction_vertical;\n\talt = 'おそらく島の写真';\n\tp.makeUmiImgs('#dir-vertical', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 150));\n\n\tconfig = CONFIG.guide_noise_octaves;\n\talt = '手描きの地図のスタイルの非常にシンプルな地形';\n\tp.makeUmiImgs('#noi-octaves', options, config, alt);\n\n\tconfig = CONFIG.guide_noise_persistence;\n\talt = '手描きの地図のスタイルの非常に詳細な地形';\n\tp.makeUmiImgs('#noi-persistence', options, config, alt);\n\n\tconfig = CONFIG.guide_noise_frequency;\n\talt = '手描きの地図のように細かく細かい島々が並ぶ、非常に断片的な世界';\n\tp.makeUmiImgs('#noi-frequency', options, config, alt);\n}\n\nasync function paintGalleryCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst gridHeight = parseInt(style.height.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 200);\n\n\tlet options = {};\n\tlet config = CONFIG.islands;\n\tlet alt = 'おそらく島の写真';\n\tp.makeUmiImgs('.islands .umi', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 250));\n\n\toptions = {\n\t\toverrideSize: true\n\t};\n\tconfig = CONFIG.desert;\n\talt = 'おそらく砂漠のオアシスの写真';\n\tp.makeUmiImgs('.desert .umi', options, config, alt);\n\n\tconfig = CONFIG.forest;\n\talt = 'おそらく山岳林の写真';\n\tp.makeUmiImgs('.forest .umi', options, config, alt);\n\n\tconfig = CONFIG.arctic;\n\talt = 'おそらく氷山の写真';\n\tp.makeUmiImgs('.arctic .umi', options, config, alt);\n}\n","'use strict';\n\nconst Umi = class {\n\tconstructor(context = null, options = null) {\n\t\tif (context?.canvas) {\n\t\t\tthis.gl = context;\n\t\t} else if (context !== null) {\n\t\t\tconsole.error('Invalid context, expected WebGL');\n\t\t}\n\n\t\tthis.options = {\n\t\t\tlogQuery: options?.logQuery ?? false,\n\t\t\toverrideSize: options?.overrideSize ?? false\n\t\t};\n\t}\n\n\tuseId(id) {\n\t\tthis.gl = document.getElementById(id)?.getContext('webgl');\n\n\t\tif (!this.gl) {\n\t\t\tconsole.error(`Could not find id: '${id}'`);\n\t\t}\n\t}\n\n\tuseClass(name) {\n\t\tthis.gl = document.getElementsByClassName(name)[0]?.getContext('webgl');\n\n\t\tif (!this.gl) {\n\t\t\tconsole.error(`Could not find class: '${name}'`);\n\t\t}\n\t}\n\n\tstatic async loadShaders(path, vertex = 'vertex', fragment = 'fragment') {\n\t\tconst shaders = await this.getShaders(path, vertex, fragment);\n\t\tUmi._shadersTemplate = { ...shaders };\n\t}\n\n\tconfigureShader(config = null, useDefault = false) {\n\t\tif (!this.gl) {\n\t\t\tconsole.error(\n\t\t\t\t'WebGL context not set.' +\n\t\t\t\t\t'Try useId(id) or useClass(name) before running this'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst sc = {};\n\n\t\tif (useDefault) {\n\t\t\tsc.attributes = Umi._attributes;\n\t\t\tsc.gradients = Umi._gradients;\n\t\t} else {\n\t\t\tsc.attributes = this.getAttributes(config?.attributes);\n\t\t\tsc.gradients = config?.gradients || Umi._gradients;\n\t\t}\n\n\t\tthis.gl.canvas.width = sc.attributes.width;\n\t\tthis.gl.canvas.height = sc.attributes.height;\n\t\tthis.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n\t\tconst fragment = Umi.configureFragment(\n\t\t\tUmi._shadersTemplate.fragment,\n\t\t\tsc\n\t\t);\n\n\t\tthis.shadersCompiled = {};\n\t\tthis.shadersCompiled.fragment = Umi.createShader(\n\t\t\tthis.gl,\n\t\t\tthis.gl.FRAGMENT_SHADER,\n\t\t\tfragment\n\t\t);\n\n\t\tthis.shadersCompiled.vertex = Umi.createShader(\n\t\t\tthis.gl,\n\t\t\tthis.gl.VERTEX_SHADER,\n\t\t\tUmi._shadersTemplate.vertex\n\t\t);\n\t}\n\n\tdraw() {\n\t\tconst program = Umi.createProgram(\n\t\t\tthis.gl,\n\t\t\tthis.shadersCompiled.vertex,\n\t\t\tthis.shadersCompiled.fragment\n\t\t);\n\n\t\tconst positionBuffer = this.gl.createBuffer();\n\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\n\t\tthis.gl.bufferData(\n\t\t\tthis.gl.ARRAY_BUFFER,\n\t\t\tnew Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]),\n\t\t\tthis.gl.STATIC_DRAW\n\t\t);\n\n\t\tconst positionAttributeLocation = this.gl.getAttribLocation(\n\t\t\tprogram,\n\t\t\t'Position'\n\t\t);\n\t\tthis.gl.vertexAttribPointer(\n\t\t\tpositionAttributeLocation,\n\t\t\t2,\n\t\t\tthis.gl.FLOAT,\n\t\t\tthis.gl.FALSE,\n\t\t\t2 * Float32Array.BYTES_PER_ELEMENT,\n\t\t\t0\n\t\t);\n\t\tthis.gl.enableVertexAttribArray(positionAttributeLocation);\n\n\t\tthis.gl.useProgram(program);\n\t\tthis.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, 4);\n\t\tthis.gl.useProgram(null);\n\t}\n\n\tstatic configureFragment(shader, config) {\n\t\tfor (const option in config) {\n\t\t\tswitch (option) {\n\t\t\t\tcase 'gradients':\n\t\t\t\t\tshader = Umi.setShaderGradients(shader, config.gradients);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'attributes':\n\t\t\t\t\tshader = Umi.setShaderAttributes(shader, config.attributes);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\tgetAttributes(config = null) {\n\t\tlet params;\n\t\tlet p;\n\n\t\tif (config) {\n\t\t\tp = s => {\n\t\t\t\tlet res;\n\n\t\t\t\tif (s in config) {\n\t\t\t\t\tres = config[s];\n\t\t\t\t} else if (Umi._params[s] in config) {\n\t\t\t\t\t// Short attribute name is used\n\t\t\t\t\tres = config[Umi.params[s]];\n\t\t\t\t} else if (['width', 'height'].includes(s)) {\n\t\t\t\t\tif (this.options.overrideSize) {\n\t\t\t\t\t\t// Attribute not overridden, but we don't\n\t\t\t\t\t\t// want the default value\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attribute not overridden, but we want\n\t\t\t\t\t// the existing size attribute\n\t\t\t\t\treturn this.gl.canvas[s];\n\t\t\t\t}\n\n\t\t\t\t// Fallback to default if nullish\n\t\t\t\treturn res ?? Umi._attributes[s];\n\t\t\t};\n\t\t} else {\n\t\t\tparams = new URLSearchParams(window.location.search);\n\t\t\tp = s => {\n\t\t\t\t// Either long or short attribute name is used\n\t\t\t\tlet res = params.get(s) ?? params.get(Umi._params[s]);\n\n\t\t\t\tif (res) {\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\n\t\t\t\tif (['width', 'height'].includes(s)) {\n\t\t\t\t\tif (this.options.overrideSize) {\n\t\t\t\t\t\t// Attribute not overridden, but we don't\n\t\t\t\t\t\t// want the default value\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attribute not overridden, but we want\n\t\t\t\t\t// the existing size attribute\n\t\t\t\t\treturn this.gl.canvas[s];\n\t\t\t\t}\n\n\t\t\t\t// Fallback to default\n\t\t\t\treturn Umi._attributes[s];\n\t\t\t};\n\t\t}\n\n\t\tconst i = n => parseInt(n);\n\t\tconst d = n => parseFloat(n);\n\t\tconst b = s => [1, '1', true, 'true'].includes(s);\n\n\t\t// Width and height\n\t\tlet w = i(p('width')) || window.innerWidth;\n\t\tlet h = i(p('height')) || window.innerHeight;\n\t\tconst square = b(p('square'));\n\n\t\tif (square) {\n\t\t\t// Force square using the shortest side\n\t\t\tif (w < h) {\n\t\t\t\th = w;\n\t\t\t} else {\n\t\t\t\tw = h;\n\t\t\t}\n\t\t}\n\n\t\t// Seed\n\t\tconst x = i(p('offsetx')) || Math.floor(Math.random() * 2 ** 20);\n\t\tconst y = i(p('offsety')) || Math.floor(Math.random() * 2 ** 20);\n\n\t\t// World generation\n\t\tconst radial = b(p('radial'));\n\t\tconst horizontal = b(p('horizontal'));\n\t\tconst vertical = b(p('vertical'));\n\t\tconst mass = i(p('mass'));\n\t\tconst octaves = i(p('octaves'));\n\t\tconst persistence = d(p('persistence'));\n\t\tconst frequency = d(p('frequency'));\n\n\t\t// Water level\n\t\tconst water = d(p('water'));\n\n\t\tconst attributes = {\n\t\t\twidth: w,\n\t\t\theight: h,\n\t\t\toffsetx: x,\n\t\t\toffsety: y,\n\t\t\tsquare: square,\n\t\t\tradial: radial,\n\t\t\t_rad: radial ? 1 : 0,\n\t\t\thorizontal: horizontal,\n\t\t\t_hor: horizontal ? 1 : 0,\n\t\t\tvertical: vertical,\n\t\t\t_ver: vertical ? 1 : 0,\n\t\t\tmass: mass,\n\t\t\toctaves: octaves,\n\t\t\tpersistence: Umi.formatShaderFloat(persistence),\n\t\t\tfrequency: Umi.formatShaderFloat(frequency),\n\t\t\twater: Umi.formatShaderFloat(water)\n\t\t};\n\n\t\tif (this.options.logQuery) {\n\t\t\tconsole.log(Umi.joinAttributes(attributes));\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tstatic joinAttributes(attributes) {\n\t\tlet params = [];\n\n\t\tfor (const a in attributes) {\n\t\t\tconst value = attributes[a];\n\n\t\t\tif (\n\t\t\t\tvalue == null ||\n\t\t\t\tvalue === 'NaN' ||\n\t\t\t\tvalue === Umi._attributes[a] ||\n\t\t\t\tvalue === Umi.formatShaderFloat(Umi._attributes[a]) ||\n\t\t\t\tvalue[0] === '_'\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tparams.push(`${Umi._params[a]}=${value}`);\n\t\t}\n\n\t\treturn '?' + params.join('&');\n\t}\n\n\tstatic setShaderAttributes(shader, attributes) {\n\t\tfor (const a in Umi._attributes) {\n\t\t\tshader = shader.replace(\n\t\t\t\t`%${a}%`,\n\t\t\t\tUmi.getIfValid(attributes[a]) || Umi._attributes[a]\n\t\t\t);\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\tstatic getIfValid(value) {\n\t\tif (value == null || isNaN(value) || value === 'NaN') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn value.toString();\n\t}\n\n\tstatic setShaderGradients(shader, gradients) {\n\t\tlet colorsCode = '';\n\t\tlet positionsCode = '';\n\n\t\tfor (let i = 0; i < gradients.colors.length; ++i) {\n\t\t\tconst c = gradients.colors[i].map(x => Umi.formatShaderFloat(x));\n\t\t\tconst p = Umi.formatShaderFloat(gradients.positions[i]);\n\t\t\tcolorsCode += `COL[${i}] = vec4(${c[0]}, ${c[1]}, ${c[2]}, 1.);\\n\\t`;\n\t\t\tpositionsCode += `POS[${i}] = ${p};\\n\\t`;\n\t\t}\n\n\t\tshader = shader.replace(/%ncolors%/, gradients.colors.length);\n\t\tshader = shader.replace(/%colors%/, colorsCode);\n\t\tshader = shader.replace(/%positions%/, positionsCode);\n\n\t\treturn shader;\n\t}\n\n\tstatic formatShaderFloat(number) {\n\t\tif (isNaN(number)) {\n\t\t\treturn 'NaN';\n\t\t}\n\n\t\tlet f = number.toString();\n\n\t\t// Number is an integer\n\t\tif (!f.includes('.')) {\n\t\t\treturn f + '.';\n\t\t}\n\n\t\tconst components = f.split('.');\n\n\t\t// Number doesn't start with a zero\n\t\tif (components[0] !== '0') {\n\t\t\treturn f;\n\t\t}\n\n\t\t// Number starts with a zero\n\t\treturn '.' + components[1];\n\t}\n\n\tstatic async getShaders(path, vertex, fragment) {\n\t\tconst shaderFiles = [vertex, fragment];\n\t\tconst shaders = {};\n\n\t\tfor (const file of shaderFiles) {\n\t\t\tshaders[file] = await Umi.getFile(`${path}${file}.glsl`);\n\t\t}\n\n\t\treturn shaders;\n\t}\n\n\tstatic async getFile(path) {\n\t\treturn (await fetch(path, { method: 'GET' })).text();\n\t}\n\n\tstatic createShader(gl, type, source) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, source);\n\t\tgl.compileShader(shader);\n\t\tconst success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n\t\tif (success) {\n\t\t\treturn shader;\n\t\t}\n\n\t\tconsole.log(Umi.enumerateSource(source));\n\t\tconsole.error(gl.getShaderInfoLog(shader));\n\t\tgl.deleteShader(shader);\n\t}\n\n\tstatic createProgram(gl, vertexShader, fragmentShader) {\n\t\tconst program = gl.createProgram();\n\t\tgl.attachShader(program, vertexShader);\n\t\tgl.attachShader(program, fragmentShader);\n\t\tgl.linkProgram(program);\n\t\tconst success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n\t\tif (success) {\n\t\t\treturn program;\n\t\t}\n\n\t\tconsole.log(gl.getProgramInfoLog(program));\n\t\tgl.deleteProgram(program);\n\t}\n\n\tstatic enumerateSource(source) {\n\t\treturn source\n\t\t\t.split('\\n')\n\t\t\t.map((row, i) => `${('   ' + i).slice(-3)}: ${row}`)\n\t\t\t.join('\\n');\n\t}\n};\n\nUMI_STATIC_PROPERTIES: {\n\tUmi._shadersTemplate = {};\n\n\t// Shader attributes with default values\n\tUmi._attributes = {\n\t\twidth: 256, // int\n\t\theight: 256, // int\n\t\toffsetx: 0, // int\n\t\toffsety: 0, // int\n\t\tsquare: false, // bool\n\t\tradial: false, // bool\n\t\thorizontal: false, // bool\n\t\tvertical: false, // bool\n\t\tmass: 150, // int\n\t\toctaves: 6, // int\n\t\tpersistence: 0.6, // float\n\t\tfrequency: 0.005, // float\n\t\twater: 0.5, // float\n\n\t\t// These are implicit\n\t\t_rad: 0,\n\t\t_hor: 0,\n\t\t_ver: 0\n\t};\n\n\t// Alternative shorter param names\n\tUmi._params = {\n\t\twidth: 'w',\n\t\theight: 'h',\n\t\toffsetx: 'x',\n\t\toffsety: 'y',\n\t\tsquare: 'sq',\n\t\tradial: 'r',\n\t\thorizontal: 'hz',\n\t\tvertical: 'vt',\n\t\tmass: 'm',\n\t\toctaves: 'o',\n\t\tpersistence: 'p',\n\t\tfrequency: 'f',\n\t\twater: 'wt'\n\t};\n\n\t// Default gradients\n\tUmi._gradients = {\n\t\tcolors: [\n\t\t\t[0.04, 0.32, 0.68], // #0a51ad\n\t\t\t[0.23, 0.51, 0.83], // #3a82d3\n\t\t\t[0.61, 0.89, 0.99], // #9be2fc\n\t\t\t[0.75, 0.65, 0.45], // #bfa572\n\t\t\t[0.31, 0.45, 0.14], // #4f7223\n\t\t\t[0.71, 0.73, 0.47], // #b5ba77\n\t\t\t[0.94, 0.93, 0.91] // #efede8\n\t\t],\n\t\tpositions: [0, 0.15, 0.2, 0.24, 0.33, 0.7, 0.8]\n\t};\n}\n"]}