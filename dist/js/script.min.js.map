{"version":3,"sources":["config.js","logo-tag.js","page.js","umi.js"],"names":["HEIGHT","GRADIENTS","desert","colors","hexArrayToColors","positions","forest","arctic","oldMap","CONFIG","islands","attributes","radial","height","horizontal","mass","octaves","frequency","water","gradients","guide_top","persistence","guide_direction_radial","guide_direction_horizontal","guide_direction_vertical","vertical","guide_noise_octaves","guide_noise_persistence","guide_noise_frequency","postcard","arr","map","hex","c","replace","Math","round","LogoTag","HTMLElement","[object Object]","super","fetch","this","getAttribute","then","response","text","innerHTML","paintCanvases","document","querySelector","paintIndexCanvases","paintGalleryCanvases","paintGuideCanvases","paintTravelCanvases","customElements","define","window","onload","Paint","fractionalSize","pixelsPerCell","frac","ppc","selector","options","config","alt","querySelectorAll","forEach","e","gl","getContext","canvas","width","umi","Umi","configureShader","draw","data","toDataURL","img","createElement","src","parentNode","replaceChildren","hidden","parent","appendChild","ctx","construct","resImg","branch","id","sakura","drawImage","removeChild","imageData","getImageData","iData","everyN","heights","y","line","x","i","push","n","parseInt","ftoi","s","rgb","r","g","b","f","p","result","Array","hlx","ratio","h","col","yr","fill","lerp","pickColor","set","putImageData","v","length","lerpColor","colA","colB","value","start","end","async","loadShaders","grid","style","getComputedStyle","nColumns","split","slice","makeUmiImgs","Promise","setTimeout","overrideSize","makeUmiCanvas","context","console","error","logQuery","getElementById","name","getElementsByClassName","path","vertex","fragment","shaders","getShaders","_shadersTemplate","useDefault","sc","_attributes","_gradients","getAttributes","viewport","configureFragment","shadersCompiled","createShader","FRAGMENT_SHADER","VERTEX_SHADER","program","createProgram","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","positionAttributeLocation","getAttribLocation","vertexAttribPointer","FLOAT","FALSE","BYTES_PER_ELEMENT","enableVertexAttribArray","useProgram","drawArrays","TRIANGLE_FAN","shader","option","setShaderGradients","setShaderAttributes","params","res","_params","includes","URLSearchParams","location","search","get","d","parseFloat","w","innerWidth","innerHeight","square","floor","random","offsetx","offsety","_rad","_hor","_ver","formatShaderFloat","log","joinAttributes","a","join","getIfValid","isNaN","toString","colorsCode","positionsCode","number","components","shaderFiles","file","getFile","method","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","enumerateSource","getShaderInfoLog","deleteShader","vertexShader","fragmentShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","row"],"mappings":"AAAA,MAAAA,OAAA,IAEAC,UAAA,CACAC,OAAA,CACAC,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,GAAA,GAAA,IAAA,MAEAC,OAAA,CACAH,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,GAAA,GAAA,IAAA,MAEAE,OAAA,CACAJ,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CAAA,EAAA,IAAA,GAAA,GAAA,GAAA,MAEAG,OAAA,CACAL,OAAAC,iBAAA,CACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEAC,UAAA,CACA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GACA,GAAA,GAAA,IAAA,KAKAI,OAAA,CACAC,QAAA,CACAC,WAAA,CACAC,QAAA,IAGAV,OAAA,CACAS,WAAA,CACAE,OAnEA,IAmEA,EACAC,YAAA,EACAC,KAAA,IACAC,QAAA,EACAC,UAAA,MACAC,MAAA,KAEAC,UAAAlB,UAAAC,QAEAI,OAAA,CACAK,WAAA,CACAE,OA9EA,IA+EAC,YAAA,EACAI,MAAA,IAEAC,UAAAlB,UAAAK,QAEAC,OAAA,CACAI,WAAA,CACAE,OAtFA,IAuFAC,YAAA,EACAF,QAAA,EACAG,KAAA,IACAE,UAAA,OAEAE,UAAAlB,UAAAM,QAEAa,UAAA,CACAT,WAAA,CACAI,KAAA,IACAM,YAAA,IACAJ,UAAA,KACAC,MAAA,IAEAC,UAAAlB,UAAAO,QAEAc,uBAAA,CACAX,WAAA,CACAC,QAAA,GAEAO,UAAAlB,UAAAO,QAEAe,2BAAA,CACAZ,WAAA,CACAG,YAAA,GAEAK,UAAAlB,UAAAO,QAEAgB,yBAAA,CACAb,WAAA,CACAc,UAAA,GAEAN,UAAAlB,UAAAO,QAEAkB,oBAAA,CACAf,WAAA,CACAK,QAAA,GAEAG,UAAAlB,UAAAO,QAEAmB,wBAAA,CACAhB,WAAA,CACAU,YAAA,IAEAF,UAAAlB,UAAAO,QAEAoB,sBAAA,CACAjB,WAAA,CACAM,UAAA,KAEAE,UAAAlB,UAAAO,QAEAqB,SAAA,CACAlB,WAAA,CACAC,QAAA,EACAG,KAAA,GACAC,QAAA,EACAC,UAAA,OAEAE,UAAA,CACAhB,OAAA,CACA,CAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,IAEAE,UAAA,CAAA,EAAA,MAKA,SAAAD,iBAAA0B,GAUA,OATAA,EAAAA,EAAAC,KAAAC,IACA,MAAAC,EAAAD,EAAAE,QAAA,IAAA,MACA,MAAA,EACAD,GAAA,GAAA,KAAA,KACAA,GAAA,EAAA,KAAA,KACA,IAAAA,GAAA,KACAF,KAAAE,GAAAE,KAAAC,MAAA,IAAAH,GAAA,SCnKA,MAAAI,gBAAAC,YACAC,cACAC,QAGAD,oBACAE,MAAAC,KAAAC,aAAA,QACAC,MAAAC,GAAAA,EAAAC,SACAF,MAAAE,IACAJ,KAAAK,UAAAD,MCLA,SAAAE,gBAKA,OAJAC,SACAC,cAAA,mBACAP,aAAA,cAGA,IAAA,QACAQ,qBACA,MACA,IAAA,UACAC,uBACA,MACA,IAAA,QACAC,qBACA,MACA,IAAA,SACAC,uBDNAC,eAAAC,OAAA,aAAAnB,SCZAoB,OAAAC,OAAAV,cAuBA,MAAAW,MAAA,MACApB,YAAAqB,EAAAC,GACAnB,KAAAoB,KAAAF,EACAlB,KAAAqB,IAAAF,EAGAtB,YAAAyB,EAAAC,EAAAC,EAAAC,GACA,IAAAlB,SAAAmB,iBAAAJ,IAAAK,SAAAC,IACA,MAAAC,EAAAD,EAAAE,WAAA,SACAD,EAAAE,OAAAC,MAAAH,EAAAE,OAAAC,MAAAhC,KAAAqB,IAAArB,KAAAoB,KACAS,EAAAE,OAAA5D,OAAA0D,EAAAE,OAAA5D,OAAA6B,KAAAqB,IAAArB,KAAAoB,KAEA,MAAAa,EAAA,IAAAC,IAAAL,EAAAN,GACAU,EAAAE,gBAAAX,GACAS,EAAAG,OACA,MAAAC,EAAAJ,EAAAJ,GAAAE,OAAAO,YACAC,EAAAhC,SAAAiC,cAAA,OACAD,EAAAd,IAAAA,EACAc,EAAAE,IAAAJ,EACAT,EAAAc,WACAC,gBAAAJ,MAIA1C,cAAAyB,EAAAC,EAAAC,EAAAC,GACA,MAAAG,EAAArB,SAAAC,cAAAc,GACAO,EAAAD,EAAAE,WAAA,SACAD,EAAAE,OAAAC,MAAAH,EAAAE,OAAAC,MAAAhC,KAAAqB,IAAArB,KAAAoB,KACAS,EAAAE,OAAA5D,OAAA0D,EAAAE,OAAA5D,OAAA6B,KAAAqB,IAAArB,KAAAoB,KAEA,MAAAa,EAAA,IAAAC,IAAAL,EAAAN,GACAU,EAAAE,gBAAAX,GACAS,EAAAG,OACA,MAAAC,EAAAJ,EAAAJ,GAAAE,OAAAO,UAAA,aAAA,IACAC,EAAAhC,SAAAiC,cAAA,OACAD,EAAAK,QAAA,EACAL,EAAAE,IAAAJ,EACA,MAAAQ,EAAAjB,EAAAc,WACAG,EAAAF,gBAAAJ,GAEA,MAAAR,EAAAxB,SAAAiC,cAAA,UACAT,EAAAC,MAAA,IACAD,EAAA5D,OAAA,IACA0E,EAAAC,YAAAf,GACA,MAAAgB,EAAAhB,EAAAD,WAAA,MAEAS,EAAAvB,OAAA,KACAC,MAAA+B,UAAAT,EAAAQ,GACA,MAAAE,EAAA1C,SAAAiC,cAAA,OACAS,EAAAxB,IAAAA,EACAwB,EAAAR,IAAAM,EAAAhB,OAAAO,UAAA,YAAA,GACAO,EAAAF,gBAAAM,GAEA,MAAAC,EAAA3C,SAAAiC,cAAA,OACAU,EAAAC,GAAA,SACAD,EAAAzB,IAAA,MACAyB,EAAAT,IAAA,iBACAI,EAAAC,YAAAI,GAEA,MAAAE,EAAA7C,SAAAiC,cAAA,OACAY,EAAAD,GAAA,SACAC,EAAA3B,IAAA,MACA2B,EAAAX,IAAA,iBACAI,EAAAC,YAAAM,IAIAvD,iBAAA0C,EAAAQ,GACAA,EAAAM,UAAAd,EAAA,EAAA,GACAA,EAAAG,WAAAY,YAAAf,GAEA,MAAAgB,EAAAR,EAAAS,aAAA,EAAA,EAAA,IAAA,KACAT,EAAAhB,OAAA5D,OAAA,IACA,MAAAsF,EAAAF,EAAAlB,KAEAqB,EAAA,GAIAC,EAAA,GAEA,IAAA,IAAAC,EAAA,EAAAA,EAAA,IAAAA,GAAAF,EAAA,CACA,MAAAG,EAAA,GAGA,IAAA,IAAAC,EAAA,EAAAA,EAAA,MAAAA,EAAA,CACA,MAAAC,EAAA,GAAA,IAAAH,EAAAE,GACAD,EAAAG,KAAAP,EAAAM,IAIA,IAAA,IAAAD,EAAA,EAAAA,EAAA,MAAAA,EAAA,CACA,MAIAG,EAAA,GAJAJ,EAAAC,EAAA,GAIA,KAHAD,EAAAC,GACAD,EAAAC,EAAA,IAGAD,EAAAC,GAAAI,SAAAD,GAGAN,EAAAK,KAAAH,GAGA,MAAAM,EAAAC,GAAA1G,iBAAA,CAAA0G,IAAA,GAAA/E,KAAA4E,GAAAC,SAAA,IAAAD,KACAI,EAAA9E,IACA,CAAA+E,EAAA/E,EAAA,GAAAgF,EAAAhF,EAAA,GAAAiF,EAAAjF,EAAA,KAGAkF,EAAAJ,EAAAF,EAAA,YAGAI,GAFAF,EAAAF,EAAA,YAEA,CACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,YACAE,EAAAF,EAAA,cAEAO,EAAA,CAAA,EAAA,IAAA,GAAA,KAAA,IAAA,GAAA,IAAArF,KAAA4E,GAAA,IAAAA,IAEAU,EAAA,IAAAC,MAAA,QAEA,IAAA,IAAAf,EAAA,EAAAA,EAhDA,KAgDAA,EACA,IAAA,IAAAC,EAAA,EAAAA,EAAA,MAAAA,EAAA,CACA,MAAAe,EAAAlB,EAAAE,GAAAC,GACA3F,EAAA0G,GAAA,GAAAhB,EAnDA,IAoDAiB,EAAA3G,EAAA0G,EAGA,IAAA,IAAAjB,EAAA,EAAAA,GAAAzF,IAAAyF,EAAA,CAEA,MAAAmB,EAAAnB,EAAA,GAzDA,GAyDAC,GAEA,IAGAmB,EAHAzF,EAAA,KA3DA,GA2DAsE,GAAAH,EAAA,IACAnE,EAAA,EAAAA,EAAA,IACAA,GAAA,IAEA,MAAA0F,EAAArB,EAAAkB,EAGA,GAAA,IAAAlB,EAAA,CACAoB,EAAAT,EAAA,GAEA,IAAA,IAAAW,EAAA,EAAAA,EAAAxB,IAAAwB,EAAA,CACA,MAAAnB,EAAA,GAAA,KAAA,KAAAgB,EAAAG,IAAApB,GACAa,EAAAZ,GAAA9C,MAAAkE,KAAAH,EAAAV,EAAAG,EAAAH,EAAA/E,GACAoF,EAAAZ,EAAA,GAAA9C,MAAAkE,KAAAH,EAAAT,EAAAE,EAAAF,EAAAhF,GACAoF,EAAAZ,EAAA,GAAA9C,MAAAkE,KAAAH,EAAAR,EAAAC,EAAAD,EAAAjF,GACAoF,EAAAZ,EAAA,GAAA,IAGA,SAIAiB,EAAA/D,MAAAmE,UAAAH,EAAAV,EAAAG,GAGA,MAAAX,EAAA,GAAA,KAAA,IAAAgB,GAAAjB,GACAa,EAAAZ,GAAA9C,MAAAkE,KAAAH,EAAAV,EAAAG,EAAAH,EAAA/E,GACAoF,EAAAZ,EAAA,GAAA9C,MAAAkE,KAAAH,EAAAT,EAAAE,EAAAF,EAAAhF,GACAoF,EAAAZ,EAAA,GAAA9C,MAAAkE,KAAAH,EAAAR,EAAAC,EAAAD,EAAAjF,GACAoF,EAAAZ,EAAA,GAAA,KAKAR,EAAAlB,KAAAgD,IAAAV,GACA5B,EAAAuC,aAAA/B,EAAA,GAAA,KAGA1D,iBAAA0F,EAAAhB,EAAAG,GACA,GAAAa,GAAAb,EAAA,GACA,OAAAH,EAAA,GAGA,IAAA,IAAAR,EAAA,EAAAA,EAAAQ,EAAAiB,SAAAzB,EACA,GAAAwB,GAAAb,EAAAX,GAAA,CACA,MAAAK,GAAAmB,EAAAb,EAAAX,EAAA,KAAAW,EAAAX,GAAAW,EAAAX,EAAA,IACA,OAAA9C,MAAAwE,UAAAlB,EAAAR,EAAA,GAAAQ,EAAAR,GAAAK,GAIA,OAAAG,EAAAA,EAAAiB,OAAA,GAGA3F,iBAAA6F,EAAAC,EAAAC,GAIA,MAAA,CAAAtB,EAHArD,MAAAkE,KAAAO,EAAApB,EAAAqB,EAAArB,EAAAsB,GAGArB,EAFAtD,MAAAkE,KAAAO,EAAAnB,EAAAoB,EAAApB,EAAAqB,GAEApB,EADAvD,MAAAkE,KAAAO,EAAAlB,EAAAmB,EAAAnB,EAAAoB,IAIA/F,YAAAgG,EAAAC,EAAAF,GACA,OAAA,EAAAA,GAAAC,EAAAD,EAAAE,IAIAC,eAAAtF,2BACAyB,IAAA8D,YAAA,SAEA,MAAAC,EAAA1F,SAAAC,cAAA,SACA0F,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAb,OACAxD,EAAAkC,SAAAgC,EAAAlE,MAAAsE,MAAA,GAAA,IAEA,IAAArF,MADAe,EAAAoE,EACA,KASAG,YAAA,OAPA,GACA,CACAtI,WAAA,CACAC,QAAA,IAGA,YAIA6H,eAAApF,2BACAuB,IAAA8D,YAAA,SAEA,MAAAC,EAAA1F,SAAAC,cAAA,SACA0F,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAb,OACAxD,EAAAkC,SAAAgC,EAAAlE,MAAAsE,MAAA,GAAA,IAEA5B,EAAA,IAAAzD,MADAe,EAAAoE,EACA,KAEA,IAAA7E,EAAA,GACAC,EAAAzD,OAAAW,UACA+C,EAAA,YACAiD,EAAA6B,YAAA,aAAAhF,EAAAC,EAAAC,SACA,IAAA+E,SAAAlC,GAAAmC,WAAAnC,EAAA,OAEA9C,EAAAzD,OAAAa,uBACA6C,EAAA,WACAiD,EAAA6B,YAAA,cAAAhF,EAAAC,EAAAC,GAEAD,EAAAzD,OAAAc,2BACA4C,EAAA,cACAiD,EAAA6B,YAAA,kBAAAhF,EAAAC,EAAAC,GAEAD,EAAAzD,OAAAe,yBACA2C,EAAA,WACAiD,EAAA6B,YAAA,gBAAAhF,EAAAC,EAAAC,SACA,IAAA+E,SAAAlC,GAAAmC,WAAAnC,EAAA,OAEA9C,EAAAzD,OAAAiB,oBACAyC,EAAA,yBACAiD,EAAA6B,YAAA,eAAAhF,EAAAC,EAAAC,GAEAD,EAAAzD,OAAAkB,wBACAwC,EAAA,uBACAiD,EAAA6B,YAAA,mBAAAhF,EAAAC,EAAAC,GAEAD,EAAAzD,OAAAmB,sBACAuC,EAAA,kCACAiD,EAAA6B,YAAA,iBAAAhF,EAAAC,EAAAC,GAGAsE,eAAArF,6BACAwB,IAAA8D,YAAA,SAEA,MAAAC,EAAA1F,SAAAC,cAAA,SACA0F,EAAAC,iBAAAF,GACAG,EAAAF,EAAA,yBAAAG,MAAA,KAAAb,OACAxD,EAAAkC,SAAAgC,EAAAlE,MAAAsE,MAAA,GAAA,IAGA5B,GAFAR,SAAAgC,EAAA/H,OAAAmI,MAAA,GAAA,IAEA,IAAArF,MADAe,EAAAoE,EACA,MAEA,IAAA7E,EAAA,GACAC,EAAAzD,OAAAC,QACAyD,EAAA,WACAiD,EAAA6B,YAAA,gBAAAhF,EAAAC,EAAAC,SACA,IAAA+E,SAAAlC,GAAAmC,WAAAnC,EAAA,OAEA/C,EAAA,CACAmF,cAAA,GAEAlF,EAAAzD,OAAAP,OACAiE,EAAA,iBACAiD,EAAA6B,YAAA,eAAAhF,EAAAC,EAAAC,GAEAD,EAAAzD,OAAAH,OACA6D,EAAA,aACAiD,EAAA6B,YAAA,eAAAhF,EAAAC,EAAAC,GAEAD,EAAAzD,OAAAF,OACA4D,EAAA,YACAiD,EAAA6B,YAAA,eAAAhF,EAAAC,EAAAC,GAGAsE,eAAAnF,4BACAsB,IAAA8D,YAAA,SAEA,MAAAtB,EAAA,IAAAzD,MAAA,IAAA,KAEA,IACAO,EAAAzD,OAAAoB,SAEAuF,EAAAiC,cAAA,OAHA,GAGAnF,EADA,UCrUA,MAAAU,IAAA,MACArC,YAAA+G,EAAA,KAAArF,EAAA,MACAqF,GAAA7E,OACA/B,KAAA6B,GAAA+E,EACA,OAAAA,GACAC,QAAAC,MAAA,mCAGA9G,KAAAuB,QAAA,CACAwF,SAAAxF,GAAAwF,WAAA,EACAL,aAAAnF,GAAAmF,eAAA,GAIA7G,MAAAsD,GACAnD,KAAA6B,GAAAtB,SAAAyG,eAAA7D,IAAArB,WAAA,SAEA9B,KAAA6B,IACAgF,QAAAC,MAAA,uBAAA3D,MAIAtD,SAAAoH,GACAjH,KAAA6B,GAAAtB,SAAA2G,uBAAAD,GAAA,IAAAnF,WAAA,SAEA9B,KAAA6B,IACAgF,QAAAC,MAAA,0BAAAG,MAIApH,yBAAAsH,EAAAC,EAAA,SAAAC,EAAA,YACA,MAAAC,QAAAtH,KAAAuH,WAAAJ,EAAAC,EAAAC,GACAnF,IAAAsF,iBAAA,IAAAF,GAGAzH,gBAAA2B,EAAA,KAAAiG,GAAA,GACA,IAAAzH,KAAA6B,GAMA,YALAgF,QAAAC,MACA,6EAOA,MAAAY,EAAA,GAEAD,GACAC,EAAAzJ,WAAAiE,IAAAyF,YACAD,EAAAjJ,UAAAyD,IAAA0F,aAEAF,EAAAzJ,WAAA+B,KAAA6H,cAAArG,GAAAvD,YACAyJ,EAAAjJ,UAAA+C,GAAA/C,WAAAyD,IAAA0F,YAGA5H,KAAA6B,GAAAE,OAAAC,MAAA0F,EAAAzJ,WAAA+D,MACAhC,KAAA6B,GAAAE,OAAA5D,OAAAuJ,EAAAzJ,WAAAE,OACA6B,KAAA6B,GAAAiG,SAAA,EAAA,EAAA9H,KAAA6B,GAAAE,OAAAC,MAAAhC,KAAA6B,GAAAE,OAAA5D,QAEA,MAAAkJ,EAAAnF,IAAA6F,kBACA7F,IAAAsF,iBAAAH,SACAK,GAGA1H,KAAAgI,gBAAA,GACAhI,KAAAgI,gBAAAX,SAAAnF,IAAA+F,aACAjI,KAAA6B,GACA7B,KAAA6B,GAAAqG,gBACAb,GAGArH,KAAAgI,gBAAAZ,OAAAlF,IAAA+F,aACAjI,KAAA6B,GACA7B,KAAA6B,GAAAsG,cACAjG,IAAAsF,iBAAAJ,QAIAvH,OACA,MAAAuI,EAAAlG,IAAAmG,cACArI,KAAA6B,GACA7B,KAAAgI,gBAAAZ,OACApH,KAAAgI,gBAAAX,UAGAiB,EAAAtI,KAAA6B,GAAA0G,eACAvI,KAAA6B,GAAA2G,WAAAxI,KAAA6B,GAAA4G,aAAAH,GACAtI,KAAA6B,GAAA6G,WACA1I,KAAA6B,GAAA4G,aACA,IAAAE,aAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IACA3I,KAAA6B,GAAA+G,aAGA,MAAAC,EAAA7I,KAAA6B,GAAAiH,kBACAV,EACA,YAEApI,KAAA6B,GAAAkH,oBACAF,EACA,EACA7I,KAAA6B,GAAAmH,MACAhJ,KAAA6B,GAAAoH,MACA,EAAAN,aAAAO,kBACA,GAEAlJ,KAAA6B,GAAAsH,wBAAAN,GAEA7I,KAAA6B,GAAAuH,WAAAhB,GACApI,KAAA6B,GAAAwH,WAAArJ,KAAA6B,GAAAyH,aAAA,EAAA,GACAtJ,KAAA6B,GAAAuH,WAAA,MAGAvJ,yBAAA0J,EAAA/H,GACA,IAAA,MAAAgI,KAAAhI,EACA,OAAAgI,GACA,IAAA,YACAD,EAAArH,IAAAuH,mBAAAF,EAAA/H,EAAA/C,WACA,MACA,IAAA,aACA8K,EAAArH,IAAAwH,oBAAAH,EAAA/H,EAAAvD,YAKA,OAAAsL,EAGA1J,cAAA2B,EAAA,MACA,IAAAmI,EACAjF,EAEAlD,EACAkD,EAAAN,IACA,IAAAwF,EAEA,GAAAxF,KAAA5C,EACAoI,EAAApI,EAAA4C,QACA,GAAAlC,IAAA2H,QAAAzF,KAAA5C,EAEAoI,EAAApI,EAAAU,IAAAyH,OAAAvF,SACA,GAAA,CAAA,QAAA,UAAA0F,SAAA1F,GACA,OAAApE,KAAAuB,QAAAmF,cAQA1G,KAAA6B,GAAAE,OAAAqC,GAIA,OAAAwF,GAAA1H,IAAAyF,YAAAvD,KAGAuF,EAAA,IAAAI,gBAAAhJ,OAAAiJ,SAAAC,QACAvF,EAAAN,IAEA,IAAAwF,EAAAD,EAAAO,IAAA9F,IAAAuF,EAAAO,IAAAhI,IAAA2H,QAAAzF,IAEA,OAAAwF,IAIA,CAAA,QAAA,UAAAE,SAAA1F,IACApE,KAAAuB,QAAAmF,cAQA1G,KAAA6B,GAAAE,OAAAqC,GAIAlC,IAAAyF,YAAAvD,MAIA,MAAAL,EAAAE,GAAAC,SAAAD,GACAkG,EAAAlG,GAAAmG,WAAAnG,GACAO,EAAAJ,GAAA,CAAA,EAAA,KAAA,EAAA,QAAA0F,SAAA1F,GAGA,IAAAiG,EAAAtG,EAAAW,EAAA,WAAA3D,OAAAuJ,WACAvF,EAAAhB,EAAAW,EAAA,YAAA3D,OAAAwJ,YACA,MAAAC,EAAAhG,EAAAE,EAAA,WAEA8F,IAEAH,EAAAtF,EACAA,EAAAsF,EAEAA,EAAAtF,GAKA,MAAAjB,EAAAC,EAAAW,EAAA,aAAAjF,KAAAgL,MAAAhL,KAAAiL,SAAA,GAAA,IACA9G,EAAAG,EAAAW,EAAA,aAAAjF,KAAAgL,MAAAhL,KAAAiL,SAAA,GAAA,IAGAxM,EAAAsG,EAAAE,EAAA,WACAtG,EAAAoG,EAAAE,EAAA,eACA3F,EAAAyF,EAAAE,EAAA,aACArG,EAAA0F,EAAAW,EAAA,SACApG,EAAAyF,EAAAW,EAAA,YACA/F,EAAAwL,EAAAzF,EAAA,gBACAnG,EAAA4L,EAAAzF,EAAA,cAGAlG,EAAA2L,EAAAzF,EAAA,UAEAzG,EAAA,CACA+D,MAAAqI,EACAlM,OAAA4G,EACA4F,QAAA7G,EACA8G,QAAAhH,EACA4G,OAAAA,EACAtM,OAAAA,EACA2M,KAAA3M,EAAA,EAAA,EACAE,WAAAA,EACA0M,KAAA1M,EAAA,EAAA,EACAW,SAAAA,EACAgM,KAAAhM,EAAA,EAAA,EACAV,KAAAA,EACAC,QAAAA,EACAK,YAAAuD,IAAA8I,kBAAArM,GACAJ,UAAA2D,IAAA8I,kBAAAzM,GACAC,MAAA0D,IAAA8I,kBAAAxM,IAOA,OAJAwB,KAAAuB,QAAAwF,UACAF,QAAAoE,IAAA/I,IAAAgJ,eAAAjN,IAGAA,EAGA4B,sBAAA5B,GACA,IAAA0L,EAAA,GAEA,IAAA,MAAAwB,KAAAlN,EAAA,CACA,MAAA2H,EAAA3H,EAAAkN,GAGA,MAAAvF,GACA,QAAAA,GACAA,IAAA1D,IAAAyF,YAAAwD,IACAvF,IAAA1D,IAAA8I,kBAAA9I,IAAAyF,YAAAwD,KACA,MAAAvF,EAAA,IAKA+D,EAAA3F,KAAA,GAAA9B,IAAA2H,QAAAsB,MAAAvF,KAGA,MAAA,IAAA+D,EAAAyB,KAAA,KAGAvL,2BAAA0J,EAAAtL,GACA,IAAA,MAAAkN,KAAAjJ,IAAAyF,YACA4B,EAAAA,EAAA/J,QACA,IAAA2L,KACAjJ,IAAAmJ,WAAApN,EAAAkN,KAAAjJ,IAAAyF,YAAAwD,IAIA,OAAA5B,EAGA1J,kBAAA+F,GACA,OAAA,MAAAA,IAAA0F,MAAA1F,IAAA,QAAAA,GAIAA,EAAA2F,WAGA1L,0BAAA0J,EAAA9K,GACA,IAAA+M,EAAA,GACAC,EAAA,GAEA,IAAA,IAAA1H,EAAA,EAAAA,EAAAtF,EAAAhB,OAAA+H,SAAAzB,EAAA,CACA,MAAAxE,EAAAd,EAAAhB,OAAAsG,GAAA1E,KAAAyE,GAAA5B,IAAA8I,kBAAAlH,KACAY,EAAAxC,IAAA8I,kBAAAvM,EAAAd,UAAAoG,IACAyH,GAAA,OAAAzH,aAAAxE,EAAA,OAAAA,EAAA,OAAAA,EAAA,eACAkM,GAAA,OAAA1H,QAAAW,SAOA,OAFA6E,GADAA,GADAA,EAAAA,EAAA/J,QAAA,YAAAf,EAAAhB,OAAA+H,SACAhG,QAAA,WAAAgM,IACAhM,QAAA,cAAAiM,GAKA5L,yBAAA6L,GACA,GAAAJ,MAAAI,GACA,MAAA,MAGA,IAAAjH,EAAAiH,EAAAH,WAGA,IAAA9G,EAAAqF,SAAA,KACA,OAAArF,EAAA,IAGA,MAAAkH,EAAAlH,EAAA4B,MAAA,KAGA,MAAA,MAAAsF,EAAA,GACAlH,EAIA,IAAAkH,EAAA,GAGA9L,wBAAAsH,EAAAC,EAAAC,GACA,MAAAuE,EAAA,CAAAxE,EAAAC,GACAC,EAAA,GAEA,IAAA,MAAAuE,KAAAD,EACAtE,EAAAuE,SAAA3J,IAAA4J,QAAA,GAAA3E,IAAA0E,UAGA,OAAAvE,EAGAzH,qBAAAsH,GACA,aAAApH,MAAAoH,EAAA,CAAA4E,OAAA,SAAA3L,OAGAP,oBAAAgC,EAAAmK,EAAAC,GACA,MAAA1C,EAAA1H,EAAAoG,aAAA+D,GACAnK,EAAAqK,aAAA3C,EAAA0C,GACApK,EAAAsK,cAAA5C,GAGA,GAFA1H,EAAAuK,mBAAA7C,EAAA1H,EAAAwK,gBAGA,OAAA9C,EAGA1C,QAAAoE,IAAA/I,IAAAoK,gBAAAL,IACApF,QAAAC,MAAAjF,EAAA0K,iBAAAhD,IACA1H,EAAA2K,aAAAjD,GAGA1J,qBAAAgC,EAAA4K,EAAAC,GACA,MAAAtE,EAAAvG,EAAAwG,gBACAxG,EAAA8K,aAAAvE,EAAAqE,GACA5K,EAAA8K,aAAAvE,EAAAsE,GACA7K,EAAA+K,YAAAxE,GAGA,GAFAvG,EAAAgL,oBAAAzE,EAAAvG,EAAAiL,aAGA,OAAA1E,EAGAvB,QAAAoE,IAAApJ,EAAAkL,kBAAA3E,IACAvG,EAAAmL,cAAA5E,GAGAvI,uBAAAoM,GACA,OAAAA,EACA5F,MAAA,MACAhH,KAAA,CAAA4N,EAAAlJ,IAAA,IAAA,MAAAA,GAAAuC,OAAA,OAAA2G,MACA7B,KAAA,QAKAlJ,IAAAsF,iBAAA,GAGAtF,IAAAyF,YAAA,CACA3F,MAAA,IACA7D,OAAA,IACAwM,QAAA,EACAC,QAAA,EACAJ,QAAA,EACAtM,QAAA,EACAE,YAAA,EACAW,UAAA,EACAV,KAAA,IACAC,QAAA,EACAK,YAAA,GACAJ,UAAA,KACAC,MAAA,GAGAqM,KAAA,EACAC,KAAA,EACAC,KAAA,GAIA7I,IAAA2H,QAAA,CACA7H,MAAA,IACA7D,OAAA,IACAwM,QAAA,IACAC,QAAA,IACAJ,OAAA,KACAtM,OAAA,IACAE,WAAA,KACAW,SAAA,KACAV,KAAA,IACAC,QAAA,IACAK,YAAA,IACAJ,UAAA,IACAC,MAAA,MAIA0D,IAAA0F,WAAA,CACAnK,OAAA,CACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,KACA,CAAA,IAAA,IAAA,MAEAE,UAAA,CAAA,EAAA,IAAA,GAAA,IAAA,IAAA,GAAA","file":"script.min.js","sourcesContent":["const HEIGHT = 800;\n\nconst GRADIENTS = {\n\tdesert: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#F1C673',\n\t\t\t'#EAAC4A',\n\t\t\t'#2B601D',\n\t\t\t'#F8DDA0',\n\t\t\t'#A6D5D3'\n\t\t]),\n\t\tpositions: [0, 0.6, 0.8, 0.85, 0.88]\n\t},\n\tforest: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#3B5D0D',\n\t\t\t'#13280A',\n\t\t\t'#8B754B',\n\t\t\t'#C8CBCC',\n\t\t\t'#FFFFFF'\n\t\t]),\n\t\tpositions: [0, 0.6, 0.8, 0.85, 0.99]\n\t},\n\tarctic: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#1B3983',\n\t\t\t'#264EB8',\n\t\t\t'#72C8FB',\n\t\t\t'#CCFDFF',\n\t\t\t'#EBFAFE',\n\t\t\t'#DDFFFF'\n\t\t]),\n\t\tpositions: [0, 0.01, 0.1, 0.2, 0.5, 0.99]\n\t},\n\toldMap: {\n\t\tcolors: hexArrayToColors([\n\t\t\t'#96A18B',\n\t\t\t'#596D5A',\n\t\t\t'#1D160B',\n\t\t\t'#AAA268',\n\t\t\t'#EBB468',\n\t\t\t'#959B5B',\n\t\t\t'#1D160B',\n\t\t\t'#51572A',\n\t\t\t'#51572A',\n\t\t\t'#1D160B',\n\t\t\t'#836E4B',\n\t\t\t'#E4CC95',\n\t\t\t'#8D775A',\n\t\t\t'#5e503b',\n\t\t\t'#CFCAA2'\n\t\t]),\n\t\tpositions: [\n\t\t\t0, 0.14, 0.16, 0.18, 0.25, 0.48, 0.49, 0.5, 0.51, 0.68, 0.69, 0.7,\n\t\t\t0.8, 0.9, 0.99, 1\n\t\t]\n\t}\n};\n\nconst CONFIG = {\n\tislands: {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t}\n\t},\n\tdesert: {\n\t\tattributes: {\n\t\t\theight: HEIGHT / 3,\n\t\t\thorizontal: true,\n\t\t\tmass: 500,\n\t\t\toctaves: 5,\n\t\t\tfrequency: 0.0025,\n\t\t\twater: 0.45\n\t\t},\n\t\tgradients: GRADIENTS.desert\n\t},\n\tforest: {\n\t\tattributes: {\n\t\t\theight: HEIGHT,\n\t\t\thorizontal: true,\n\t\t\twater: 0.4\n\t\t},\n\t\tgradients: GRADIENTS.forest\n\t},\n\tarctic: {\n\t\tattributes: {\n\t\t\theight: HEIGHT,\n\t\t\thorizontal: true,\n\t\t\tradial: true,\n\t\t\tmass: 300,\n\t\t\tfrequency: 0.0025\n\t\t},\n\t\tgradients: GRADIENTS.arctic\n\t},\n\tguide_top: {\n\t\tattributes: {\n\t\t\tmass: 1000,\n\t\t\tpersistence: 0.55,\n\t\t\tfrequency: 0.001,\n\t\t\twater: 0.4\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_radial: {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_horizontal: {\n\t\tattributes: {\n\t\t\thorizontal: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_direction_vertical: {\n\t\tattributes: {\n\t\t\tvertical: true\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_octaves: {\n\t\tattributes: {\n\t\t\toctaves: 3\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_persistence: {\n\t\tattributes: {\n\t\t\tpersistence: 0.8\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tguide_noise_frequency: {\n\t\tattributes: {\n\t\t\tfrequency: 0.05\n\t\t},\n\t\tgradients: GRADIENTS.oldMap\n\t},\n\tpostcard: {\n\t\tattributes: {\n\t\t\tradial: true,\n\t\t\tmass: 60,\n\t\t\toctaves: 4,\n\t\t\tfrequency: 0.0035\n\t\t},\n\t\tgradients: {\n\t\t\tcolors: [\n\t\t\t\t[0, 0, 0],\n\t\t\t\t[1, 1, 1]\n\t\t\t],\n\t\t\tpositions: [0, 1]\n\t\t}\n\t}\n};\n\nfunction hexArrayToColors(arr) {\n\tarr = arr.map(hex => {\n\t\tconst c = hex.replace('#', '0x');\n\t\treturn [\n\t\t\t((c >> 16) & 255) / 255,\n\t\t\t((c >> 8) & 255) / 255,\n\t\t\t(c & 255) / 255\n\t\t].map(c => Math.round(c * 100) / 100);\n\t});\n\n\treturn arr;\n}\n","class LogoTag extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tconnectedCallback() {\n\t\tfetch(this.getAttribute('src'))\n\t\t\t.then(response => response.text())\n\t\t\t.then(text => {\n\t\t\t\tthis.innerHTML = text;\n\t\t\t});\n\t}\n}\n\ncustomElements.define('custom-svg', LogoTag);\n","'use strict';\n\nwindow.onload = paintCanvases;\n\nfunction paintCanvases() {\n\tconst page = document\n\t\t.querySelector('meta[data-page]')\n\t\t.getAttribute('data-page');\n\n\tswitch (page) {\n\t\tcase 'index':\n\t\t\tpaintIndexCanvases();\n\t\t\tbreak;\n\t\tcase 'gallery':\n\t\t\tpaintGalleryCanvases();\n\t\t\tbreak;\n\t\tcase 'guide':\n\t\t\tpaintGuideCanvases();\n\t\t\tbreak;\n\t\tcase 'travel':\n\t\t\tpaintTravelCanvases();\n\t\t\tbreak;\n\t}\n}\n\nconst Paint = class {\n\tconstructor(fractionalSize, pixelsPerCell) {\n\t\tthis.frac = fractionalSize;\n\t\tthis.ppc = pixelsPerCell;\n\t}\n\n\tmakeUmiImgs(selector, options, config, alt) {\n\t\t[...document.querySelectorAll(selector)].forEach(e => {\n\t\t\tconst gl = e.getContext('webgl');\n\t\t\tgl.canvas.width = (gl.canvas.width / this.ppc) * this.frac;\n\t\t\tgl.canvas.height = (gl.canvas.height / this.ppc) * this.frac;\n\n\t\t\tconst umi = new Umi(gl, options);\n\t\t\tumi.configureShader(config);\n\t\t\tumi.draw();\n\t\t\tconst data = umi.gl.canvas.toDataURL();\n\t\t\tconst img = document.createElement('img');\n\t\t\timg.alt = alt;\n\t\t\timg.src = data;\n\t\t\tconst parent = e.parentNode;\n\t\t\tparent.replaceChildren(img);\n\t\t});\n\t}\n\n\tmakeUmiCanvas(selector, options, config, alt) {\n\t\tconst e = document.querySelector(selector);\n\t\tconst gl = e.getContext('webgl');\n\t\tgl.canvas.width = (gl.canvas.width / this.ppc) * this.frac;\n\t\tgl.canvas.height = (gl.canvas.height / this.ppc) * this.frac;\n\n\t\tconst umi = new Umi(gl, options);\n\t\tumi.configureShader(config);\n\t\tumi.draw();\n\t\tconst data = umi.gl.canvas.toDataURL('image/jpeg', 0.2);\n\t\tconst img = document.createElement('img');\n\t\timg.hidden = true;\n\t\timg.src = data;\n\t\tconst parent = e.parentNode;\n\t\tparent.replaceChildren(img);\n\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = 256;\n\t\tcanvas.height = 256;\n\t\tparent.appendChild(canvas);\n\t\tconst ctx = canvas.getContext('2d');\n\n\t\timg.onload = () => {\n\t\t\tPaint.construct(img, ctx);\n\t\t\tconst resImg = document.createElement('img');\n\t\t\tresImg.alt = alt;\n\t\t\tresImg.src = ctx.canvas.toDataURL('image/png', 0);\n\t\t\tparent.replaceChildren(resImg);\n\n\t\t\tconst branch = document.createElement('img');\n\t\t\tbranch.id = 'branch';\n\t\t\tbranch.alt = '桜の枝';\n\t\t\tbranch.src = 'img/branch.png';\n\t\t\tparent.appendChild(branch);\n\n\t\t\tconst sakura = document.createElement('img');\n\t\t\tsakura.id = 'sakura';\n\t\t\tsakura.alt = '桜の花';\n\t\t\tsakura.src = 'img/sakura.png';\n\t\t\tparent.appendChild(sakura);\n\t\t};\n\t}\n\n\tstatic construct(img, ctx) {\n\t\tctx.drawImage(img, 0, 0);\n\t\timg.parentNode.removeChild(img);\n\n\t\tconst imageData = ctx.getImageData(0, 0, 256, 256);\n\t\tctx.canvas.height = 128;\n\t\tconst iData = imageData.data;\n\n\t\tconst everyN = 16;\n\t\tconst nLayers = 256 / everyN;\n\n\t\t// nLayers x 256\n\t\tconst heights = [];\n\n\t\tfor (let y = 0; y < 256; y += everyN) {\n\t\t\tconst line = [];\n\n\t\t\t// Copy\n\t\t\tfor (let x = 0; x < 256; ++x) {\n\t\t\t\tconst i = (y * 256 + x) * 4;\n\t\t\t\tline.push(iData[i]);\n\t\t\t}\n\n\t\t\t// Smoothing\n\t\t\tfor (let x = 1; x < 255; ++x) {\n\t\t\t\tconst a = line[x - 1];\n\t\t\t\tconst b = line[x];\n\t\t\t\tconst c = line[x + 1];\n\n\t\t\t\tconst n = 0.7 * a + 0.15 * (b + c);\n\t\t\t\tline[x] = parseInt(n);\n\t\t\t}\n\n\t\t\theights.push(line);\n\t\t}\n\n\t\tconst ftoi = s => hexArrayToColors([s])[0].map(n => parseInt(n * 255));\n\t\tconst rgb = c => {\n\t\t\treturn { r: c[0], g: c[1], b: c[2] };\n\t\t};\n\n\t\tconst f = rgb(ftoi('#f98d27'));\n\t\tconst border = rgb(ftoi('#555555'));\n\t\tconst doBorder = false;\n\t\tconst g = [\n\t\t\trgb(ftoi('#0a51ad')),\n\t\t\trgb(ftoi('#3a82d3')),\n\t\t\trgb(ftoi('#9be2fc')),\n\t\t\trgb(ftoi('#bfa572')),\n\t\t\trgb(ftoi('#4f7223')),\n\t\t\trgb(ftoi('#b5ba77')),\n\t\t\trgb(ftoi('#efede8'))\n\t\t];\n\t\tconst p = [0, 0.15, 0.2, 0.205, 0.25, 0.7, 0.8].map(n => n * 255);\n\n\t\tconst result = new Array(128 * 256 * 4);\n\n\t\tfor (let line = 0; line < nLayers; ++line) {\n\t\t\tfor (let x = 0; x < 256; ++x) {\n\t\t\t\tconst hlx = heights[line][x];\n\t\t\t\tconst height = hlx * ((0.5 * line) / nLayers);\n\t\t\t\tconst ratio = height / hlx;\n\n\t\t\t\t// Pixel height data to vertical line\n\t\t\t\tfor (let y = 0; y <= height; ++y) {\n\t\t\t\t\t// Set initial height higher for each layer\n\t\t\t\t\tconst h = y + (nLayers - line) * (everyN / 2);\n\n\t\t\t\t\tlet c = 255 - (nLayers - line) * everyN * 0.75;\n\t\t\t\t\tc = 1 - c / 255;\n\t\t\t\t\tc /= 1.5;\n\t\t\t\t\tlet col;\n\t\t\t\t\tconst yr = y / ratio;\n\n\t\t\t\t\t// Water\n\t\t\t\t\tif (y === 0) {\n\t\t\t\t\t\tcol = g[0];\n\n\t\t\t\t\t\tfor (let fill = 0; fill < everyN / 2; ++fill) {\n\t\t\t\t\t\t\tconst i = ((255 - (h + fill)) * 256 + x) * 4;\n\t\t\t\t\t\t\tresult[i] = Paint.lerp(col.r, f.r, c);\n\t\t\t\t\t\t\tresult[i + 1] = Paint.lerp(col.g, f.g, c);\n\t\t\t\t\t\t\tresult[i + 2] = Paint.lerp(col.b, f.b, c);\n\t\t\t\t\t\t\tresult[i + 3] = 255;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (doBorder && yr > p[2] && y >= height - 2) {\n\t\t\t\t\t\tcol = border;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcol = Paint.pickColor(yr, g, p);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst i = ((255 - h) * 256 + x) * 4;\n\t\t\t\t\tresult[i] = Paint.lerp(col.r, f.r, c);\n\t\t\t\t\tresult[i + 1] = Paint.lerp(col.g, f.g, c);\n\t\t\t\t\tresult[i + 2] = Paint.lerp(col.b, f.b, c);\n\t\t\t\t\tresult[i + 3] = 255;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\timageData.data.set(result);\n\t\tctx.putImageData(imageData, 0, -128 + everyN / 2);\n\t}\n\n\tstatic pickColor(v, g, p) {\n\t\tif (v <= p[0]) {\n\t\t\treturn g[0];\n\t\t}\n\n\t\tfor (let i = 1; i < g.length; ++i) {\n\t\t\tif (v <= p[i]) {\n\t\t\t\tconst s = (v - p[i - 1]) / (p[i] - p[i - 1]);\n\t\t\t\treturn Paint.lerpColor(g[i - 1], g[i], s);\n\t\t\t}\n\t\t}\n\n\t\treturn g[g.length - 1];\n\t}\n\n\tstatic lerpColor(colA, colB, value) {\n\t\tconst r = Paint.lerp(colA.r, colB.r, value);\n\t\tconst g = Paint.lerp(colA.g, colB.g, value);\n\t\tconst b = Paint.lerp(colA.b, colB.b, value);\n\t\treturn { r: r, g: g, b: b };\n\t}\n\n\tstatic lerp(start, end, value) {\n\t\treturn (1 - value) * start + value * end;\n\t}\n};\n\nasync function paintIndexCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 100);\n\n\tlet options = {};\n\tlet config = {\n\t\tattributes: {\n\t\t\tradial: true\n\t\t}\n\t};\n\tlet alt = 'おそらく島の写真';\n\tp.makeUmiImgs('.umi', options, config, alt);\n}\n\nasync function paintGuideCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 200);\n\n\tlet options = {};\n\tlet config = CONFIG.guide_top;\n\tlet alt = '手描き地図風の地形';\n\tp.makeUmiImgs('#guide-top', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 250));\n\n\tconfig = CONFIG.guide_direction_radial;\n\talt = '手描き地図風の島';\n\tp.makeUmiImgs('#dir-radial', options, config, alt);\n\n\tconfig = CONFIG.guide_direction_horizontal;\n\talt = '手描き地図風の水平地形';\n\tp.makeUmiImgs('#dir-horizontal', options, config, alt);\n\n\tconfig = CONFIG.guide_direction_vertical;\n\talt = 'おそらく島の写真';\n\tp.makeUmiImgs('#dir-vertical', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 150));\n\n\tconfig = CONFIG.guide_noise_octaves;\n\talt = '手描きの地図のスタイルの非常にシンプルな地形';\n\tp.makeUmiImgs('#noi-octaves', options, config, alt);\n\n\tconfig = CONFIG.guide_noise_persistence;\n\talt = '手描きの地図のスタイルの非常に詳細な地形';\n\tp.makeUmiImgs('#noi-persistence', options, config, alt);\n\n\tconfig = CONFIG.guide_noise_frequency;\n\talt = '手描きの地図のように細かく細かい島々が並ぶ、非常に断片的な世界';\n\tp.makeUmiImgs('#noi-frequency', options, config, alt);\n}\n\nasync function paintGalleryCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst grid = document.querySelector('.grid');\n\tconst style = getComputedStyle(grid);\n\tconst nColumns = style['grid-template-columns'].split(' ').length;\n\tconst width = parseInt(style.width.slice(0, -2));\n\tconst gridHeight = parseInt(style.height.slice(0, -2));\n\tconst frac = width / nColumns;\n\tconst p = new Paint(frac, 200);\n\n\tlet options = {};\n\tlet config = CONFIG.islands;\n\tlet alt = 'おそらく島の写真';\n\tp.makeUmiImgs('.islands .umi', options, config, alt);\n\tawait new Promise(r => setTimeout(r, 250));\n\n\toptions = {\n\t\toverrideSize: true\n\t};\n\tconfig = CONFIG.desert;\n\talt = 'おそらく砂漠のオアシスの写真';\n\tp.makeUmiImgs('.desert .umi', options, config, alt);\n\n\tconfig = CONFIG.forest;\n\talt = 'おそらく山岳林の写真';\n\tp.makeUmiImgs('.forest .umi', options, config, alt);\n\n\tconfig = CONFIG.arctic;\n\talt = 'おそらく氷山の写真';\n\tp.makeUmiImgs('.arctic .umi', options, config, alt);\n}\n\nasync function paintTravelCanvases() {\n\tawait Umi.loadShaders('glsl/');\n\n\tconst p = new Paint(256, 100);\n\n\tlet options = {};\n\tlet config = CONFIG.postcard;\n\tlet alt = '島々の絵葉書';\n\tp.makeUmiCanvas('.umi', options, config, alt);\n}\n","'use strict';\n\nconst Umi = class {\n\tconstructor(context = null, options = null) {\n\t\tif (context?.canvas) {\n\t\t\tthis.gl = context;\n\t\t} else if (context !== null) {\n\t\t\tconsole.error('Invalid context, expected WebGL');\n\t\t}\n\n\t\tthis.options = {\n\t\t\tlogQuery: options?.logQuery ?? false,\n\t\t\toverrideSize: options?.overrideSize ?? false\n\t\t};\n\t}\n\n\tuseId(id) {\n\t\tthis.gl = document.getElementById(id)?.getContext('webgl');\n\n\t\tif (!this.gl) {\n\t\t\tconsole.error(`Could not find id: '${id}'`);\n\t\t}\n\t}\n\n\tuseClass(name) {\n\t\tthis.gl = document.getElementsByClassName(name)[0]?.getContext('webgl');\n\n\t\tif (!this.gl) {\n\t\t\tconsole.error(`Could not find class: '${name}'`);\n\t\t}\n\t}\n\n\tstatic async loadShaders(path, vertex = 'vertex', fragment = 'fragment') {\n\t\tconst shaders = await this.getShaders(path, vertex, fragment);\n\t\tUmi._shadersTemplate = { ...shaders };\n\t}\n\n\tconfigureShader(config = null, useDefault = false) {\n\t\tif (!this.gl) {\n\t\t\tconsole.error(\n\t\t\t\t'WebGL context not set.' +\n\t\t\t\t\t'Try useId(id) or useClass(name) before running this'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst sc = {};\n\n\t\tif (useDefault) {\n\t\t\tsc.attributes = Umi._attributes;\n\t\t\tsc.gradients = Umi._gradients;\n\t\t} else {\n\t\t\tsc.attributes = this.getAttributes(config?.attributes);\n\t\t\tsc.gradients = config?.gradients || Umi._gradients;\n\t\t}\n\n\t\tthis.gl.canvas.width = sc.attributes.width;\n\t\tthis.gl.canvas.height = sc.attributes.height;\n\t\tthis.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n\n\t\tconst fragment = Umi.configureFragment(\n\t\t\tUmi._shadersTemplate.fragment,\n\t\t\tsc\n\t\t);\n\n\t\tthis.shadersCompiled = {};\n\t\tthis.shadersCompiled.fragment = Umi.createShader(\n\t\t\tthis.gl,\n\t\t\tthis.gl.FRAGMENT_SHADER,\n\t\t\tfragment\n\t\t);\n\n\t\tthis.shadersCompiled.vertex = Umi.createShader(\n\t\t\tthis.gl,\n\t\t\tthis.gl.VERTEX_SHADER,\n\t\t\tUmi._shadersTemplate.vertex\n\t\t);\n\t}\n\n\tdraw() {\n\t\tconst program = Umi.createProgram(\n\t\t\tthis.gl,\n\t\t\tthis.shadersCompiled.vertex,\n\t\t\tthis.shadersCompiled.fragment\n\t\t);\n\n\t\tconst positionBuffer = this.gl.createBuffer();\n\t\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\n\t\tthis.gl.bufferData(\n\t\t\tthis.gl.ARRAY_BUFFER,\n\t\t\tnew Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]),\n\t\t\tthis.gl.STATIC_DRAW\n\t\t);\n\n\t\tconst positionAttributeLocation = this.gl.getAttribLocation(\n\t\t\tprogram,\n\t\t\t'Position'\n\t\t);\n\t\tthis.gl.vertexAttribPointer(\n\t\t\tpositionAttributeLocation,\n\t\t\t2,\n\t\t\tthis.gl.FLOAT,\n\t\t\tthis.gl.FALSE,\n\t\t\t2 * Float32Array.BYTES_PER_ELEMENT,\n\t\t\t0\n\t\t);\n\t\tthis.gl.enableVertexAttribArray(positionAttributeLocation);\n\n\t\tthis.gl.useProgram(program);\n\t\tthis.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, 4);\n\t\tthis.gl.useProgram(null);\n\t}\n\n\tstatic configureFragment(shader, config) {\n\t\tfor (const option in config) {\n\t\t\tswitch (option) {\n\t\t\t\tcase 'gradients':\n\t\t\t\t\tshader = Umi.setShaderGradients(shader, config.gradients);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'attributes':\n\t\t\t\t\tshader = Umi.setShaderAttributes(shader, config.attributes);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\tgetAttributes(config = null) {\n\t\tlet params;\n\t\tlet p;\n\n\t\tif (config) {\n\t\t\tp = s => {\n\t\t\t\tlet res;\n\n\t\t\t\tif (s in config) {\n\t\t\t\t\tres = config[s];\n\t\t\t\t} else if (Umi._params[s] in config) {\n\t\t\t\t\t// Short attribute name is used\n\t\t\t\t\tres = config[Umi.params[s]];\n\t\t\t\t} else if (['width', 'height'].includes(s)) {\n\t\t\t\t\tif (this.options.overrideSize) {\n\t\t\t\t\t\t// Attribute not overridden, but we don't\n\t\t\t\t\t\t// want the default value\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attribute not overridden, but we want\n\t\t\t\t\t// the existing size attribute\n\t\t\t\t\treturn this.gl.canvas[s];\n\t\t\t\t}\n\n\t\t\t\t// Fallback to default if nullish\n\t\t\t\treturn res ?? Umi._attributes[s];\n\t\t\t};\n\t\t} else {\n\t\t\tparams = new URLSearchParams(window.location.search);\n\t\t\tp = s => {\n\t\t\t\t// Either long or short attribute name is used\n\t\t\t\tlet res = params.get(s) ?? params.get(Umi._params[s]);\n\n\t\t\t\tif (res) {\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\n\t\t\t\tif (['width', 'height'].includes(s)) {\n\t\t\t\t\tif (this.options.overrideSize) {\n\t\t\t\t\t\t// Attribute not overridden, but we don't\n\t\t\t\t\t\t// want the default value\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attribute not overridden, but we want\n\t\t\t\t\t// the existing size attribute\n\t\t\t\t\treturn this.gl.canvas[s];\n\t\t\t\t}\n\n\t\t\t\t// Fallback to default\n\t\t\t\treturn Umi._attributes[s];\n\t\t\t};\n\t\t}\n\n\t\tconst i = n => parseInt(n);\n\t\tconst d = n => parseFloat(n);\n\t\tconst b = s => [1, '1', true, 'true'].includes(s);\n\n\t\t// Width and height\n\t\tlet w = i(p('width')) || window.innerWidth;\n\t\tlet h = i(p('height')) || window.innerHeight;\n\t\tconst square = b(p('square'));\n\n\t\tif (square) {\n\t\t\t// Force square using the shortest side\n\t\t\tif (w < h) {\n\t\t\t\th = w;\n\t\t\t} else {\n\t\t\t\tw = h;\n\t\t\t}\n\t\t}\n\n\t\t// Seed\n\t\tconst x = i(p('offsetx')) || Math.floor(Math.random() * 2 ** 20);\n\t\tconst y = i(p('offsety')) || Math.floor(Math.random() * 2 ** 20);\n\n\t\t// World generation\n\t\tconst radial = b(p('radial'));\n\t\tconst horizontal = b(p('horizontal'));\n\t\tconst vertical = b(p('vertical'));\n\t\tconst mass = i(p('mass'));\n\t\tconst octaves = i(p('octaves'));\n\t\tconst persistence = d(p('persistence'));\n\t\tconst frequency = d(p('frequency'));\n\n\t\t// Water level\n\t\tconst water = d(p('water'));\n\n\t\tconst attributes = {\n\t\t\twidth: w,\n\t\t\theight: h,\n\t\t\toffsetx: x,\n\t\t\toffsety: y,\n\t\t\tsquare: square,\n\t\t\tradial: radial,\n\t\t\t_rad: radial ? 1 : 0,\n\t\t\thorizontal: horizontal,\n\t\t\t_hor: horizontal ? 1 : 0,\n\t\t\tvertical: vertical,\n\t\t\t_ver: vertical ? 1 : 0,\n\t\t\tmass: mass,\n\t\t\toctaves: octaves,\n\t\t\tpersistence: Umi.formatShaderFloat(persistence),\n\t\t\tfrequency: Umi.formatShaderFloat(frequency),\n\t\t\twater: Umi.formatShaderFloat(water)\n\t\t};\n\n\t\tif (this.options.logQuery) {\n\t\t\tconsole.log(Umi.joinAttributes(attributes));\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tstatic joinAttributes(attributes) {\n\t\tlet params = [];\n\n\t\tfor (const a in attributes) {\n\t\t\tconst value = attributes[a];\n\n\t\t\tif (\n\t\t\t\tvalue == null ||\n\t\t\t\tvalue === 'NaN' ||\n\t\t\t\tvalue === Umi._attributes[a] ||\n\t\t\t\tvalue === Umi.formatShaderFloat(Umi._attributes[a]) ||\n\t\t\t\tvalue[0] === '_'\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tparams.push(`${Umi._params[a]}=${value}`);\n\t\t}\n\n\t\treturn '?' + params.join('&');\n\t}\n\n\tstatic setShaderAttributes(shader, attributes) {\n\t\tfor (const a in Umi._attributes) {\n\t\t\tshader = shader.replace(\n\t\t\t\t`%${a}%`,\n\t\t\t\tUmi.getIfValid(attributes[a]) || Umi._attributes[a]\n\t\t\t);\n\t\t}\n\n\t\treturn shader;\n\t}\n\n\tstatic getIfValid(value) {\n\t\tif (value == null || isNaN(value) || value === 'NaN') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn value.toString();\n\t}\n\n\tstatic setShaderGradients(shader, gradients) {\n\t\tlet colorsCode = '';\n\t\tlet positionsCode = '';\n\n\t\tfor (let i = 0; i < gradients.colors.length; ++i) {\n\t\t\tconst c = gradients.colors[i].map(x => Umi.formatShaderFloat(x));\n\t\t\tconst p = Umi.formatShaderFloat(gradients.positions[i]);\n\t\t\tcolorsCode += `COL[${i}] = vec4(${c[0]}, ${c[1]}, ${c[2]}, 1.);\\n\\t`;\n\t\t\tpositionsCode += `POS[${i}] = ${p};\\n\\t`;\n\t\t}\n\n\t\tshader = shader.replace(/%ncolors%/, gradients.colors.length);\n\t\tshader = shader.replace(/%colors%/, colorsCode);\n\t\tshader = shader.replace(/%positions%/, positionsCode);\n\n\t\treturn shader;\n\t}\n\n\tstatic formatShaderFloat(number) {\n\t\tif (isNaN(number)) {\n\t\t\treturn 'NaN';\n\t\t}\n\n\t\tlet f = number.toString();\n\n\t\t// Number is an integer\n\t\tif (!f.includes('.')) {\n\t\t\treturn f + '.';\n\t\t}\n\n\t\tconst components = f.split('.');\n\n\t\t// Number doesn't start with a zero\n\t\tif (components[0] !== '0') {\n\t\t\treturn f;\n\t\t}\n\n\t\t// Number starts with a zero\n\t\treturn '.' + components[1];\n\t}\n\n\tstatic async getShaders(path, vertex, fragment) {\n\t\tconst shaderFiles = [vertex, fragment];\n\t\tconst shaders = {};\n\n\t\tfor (const file of shaderFiles) {\n\t\t\tshaders[file] = await Umi.getFile(`${path}${file}.glsl`);\n\t\t}\n\n\t\treturn shaders;\n\t}\n\n\tstatic async getFile(path) {\n\t\treturn (await fetch(path, { method: 'GET' })).text();\n\t}\n\n\tstatic createShader(gl, type, source) {\n\t\tconst shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, source);\n\t\tgl.compileShader(shader);\n\t\tconst success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n\t\tif (success) {\n\t\t\treturn shader;\n\t\t}\n\n\t\tconsole.log(Umi.enumerateSource(source));\n\t\tconsole.error(gl.getShaderInfoLog(shader));\n\t\tgl.deleteShader(shader);\n\t}\n\n\tstatic createProgram(gl, vertexShader, fragmentShader) {\n\t\tconst program = gl.createProgram();\n\t\tgl.attachShader(program, vertexShader);\n\t\tgl.attachShader(program, fragmentShader);\n\t\tgl.linkProgram(program);\n\t\tconst success = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n\t\tif (success) {\n\t\t\treturn program;\n\t\t}\n\n\t\tconsole.log(gl.getProgramInfoLog(program));\n\t\tgl.deleteProgram(program);\n\t}\n\n\tstatic enumerateSource(source) {\n\t\treturn source\n\t\t\t.split('\\n')\n\t\t\t.map((row, i) => `${('   ' + i).slice(-3)}: ${row}`)\n\t\t\t.join('\\n');\n\t}\n};\n\nUMI_STATIC_PROPERTIES: {\n\tUmi._shadersTemplate = {};\n\n\t// Shader attributes with default values\n\tUmi._attributes = {\n\t\twidth: 256, // int\n\t\theight: 256, // int\n\t\toffsetx: 0, // int\n\t\toffsety: 0, // int\n\t\tsquare: false, // bool\n\t\tradial: false, // bool\n\t\thorizontal: false, // bool\n\t\tvertical: false, // bool\n\t\tmass: 150, // int\n\t\toctaves: 6, // int\n\t\tpersistence: 0.6, // float\n\t\tfrequency: 0.005, // float\n\t\twater: 0.5, // float\n\n\t\t// These are implicit\n\t\t_rad: 0,\n\t\t_hor: 0,\n\t\t_ver: 0\n\t};\n\n\t// Alternative shorter param names\n\tUmi._params = {\n\t\twidth: 'w',\n\t\theight: 'h',\n\t\toffsetx: 'x',\n\t\toffsety: 'y',\n\t\tsquare: 'sq',\n\t\tradial: 'r',\n\t\thorizontal: 'hz',\n\t\tvertical: 'vt',\n\t\tmass: 'm',\n\t\toctaves: 'o',\n\t\tpersistence: 'p',\n\t\tfrequency: 'f',\n\t\twater: 'wt'\n\t};\n\n\t// Default gradients\n\tUmi._gradients = {\n\t\tcolors: [\n\t\t\t[0.04, 0.32, 0.68], // #0a51ad\n\t\t\t[0.23, 0.51, 0.83], // #3a82d3\n\t\t\t[0.61, 0.89, 0.99], // #9be2fc\n\t\t\t[0.75, 0.65, 0.45], // #bfa572\n\t\t\t[0.31, 0.45, 0.14], // #4f7223\n\t\t\t[0.71, 0.73, 0.47], // #b5ba77\n\t\t\t[0.94, 0.93, 0.91] // #efede8\n\t\t],\n\t\tpositions: [0, 0.15, 0.2, 0.24, 0.33, 0.7, 0.8]\n\t};\n}\n"]}