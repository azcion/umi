const HEIGHT=800,GRADIENTS={desert:{colors:hexArrayToColors(["#F1C673","#EAAC4A","#2B601D","#F8DDA0","#A6D5D3"]),positions:[0,.6,.8,.85,.88]},forest:{colors:hexArrayToColors(["#3B5D0D","#13280A","#8B754B","#C8CBCC","#FFFFFF"]),positions:[0,.6,.8,.85,.99]},arctic:{colors:hexArrayToColors(["#1B3983","#264EB8","#72C8FB","#CCFDFF","#EBFAFE","#DDFFFF"]),positions:[0,.01,.1,.2,.5,.99]},oldMap:{colors:hexArrayToColors(["#96A18B","#596D5A","#1D160B","#AAA268","#EBB468","#959B5B","#1D160B","#51572A","#51572A","#1D160B","#836E4B","#E4CC95","#8D775A","#5e503b","#CFCAA2"]),positions:[0,.14,.16,.18,.25,.48,.49,.5,.51,.68,.69,.7,.8,.9,.99,1]}},CONFIG={islands:{attributes:{radial:!0}},desert:{attributes:{height:800/3,horizontal:!0,mass:500,octaves:5,frequency:.0025,water:.45},gradients:GRADIENTS.desert},forest:{attributes:{height:800,horizontal:!0,water:.4},gradients:GRADIENTS.forest},arctic:{attributes:{height:800,horizontal:!0,radial:!0,mass:300,frequency:.0025},gradients:GRADIENTS.arctic},guide_top:{attributes:{mass:1e3,persistence:.55,frequency:.001,water:.4},gradients:GRADIENTS.oldMap},guide_direction_radial:{attributes:{radial:!0},gradients:GRADIENTS.oldMap},guide_direction_horizontal:{attributes:{horizontal:!0},gradients:GRADIENTS.oldMap},guide_direction_vertical:{attributes:{vertical:!0},gradients:GRADIENTS.oldMap},guide_noise_octaves:{attributes:{octaves:3},gradients:GRADIENTS.oldMap},guide_noise_persistence:{attributes:{persistence:.8},gradients:GRADIENTS.oldMap},guide_noise_frequency:{attributes:{frequency:.05},gradients:GRADIENTS.oldMap},postcard:{attributes:{radial:!0,mass:60,octaves:4,frequency:.0035},gradients:{colors:[[0,0,0],[1,1,1]],positions:[0,1]}}};function hexArrayToColors(e){return e=e.map((e=>{const t=e.replace("#","0x");return[(t>>16&255)/255,(t>>8&255)/255,(255&t)/255].map((e=>Math.round(100*e)/100))}))}class LogoTag extends HTMLElement{constructor(){super()}connectedCallback(){fetch(this.getAttribute("src")).then((e=>e.text())).then((e=>{this.innerHTML=e}))}}function paintCanvases(){switch(document.querySelector("meta[data-page]").getAttribute("data-page")){case"index":paintIndexCanvases();break;case"gallery":paintGalleryCanvases();break;case"guide":paintGuideCanvases();break;case"travel":paintTravelCanvases()}}async function paintIndexCanvases(){await Umi.loadShaders("glsl/");const e=document.querySelector(".grid"),t=getComputedStyle(e),a=t["grid-template-columns"].split(" ").length,r=parseInt(t.width.slice(0,-2));new Paint(r/a,100).makeUmiImgs(".umi",{},{attributes:{radial:!0}},"おそらく島の写真")}async function paintGuideCanvases(){await Umi.loadShaders("glsl/");const e=document.querySelector(".grid"),t=getComputedStyle(e),a=t["grid-template-columns"].split(" ").length,r=parseInt(t.width.slice(0,-2)),i=new Paint(r/a,200);let s={},n=CONFIG.guide_top,o="手描き地図風の地形";i.makeUmiImgs("#guide-top",s,n,o),await new Promise((e=>setTimeout(e,250))),n=CONFIG.guide_direction_radial,o="手描き地図風の島",i.makeUmiImgs("#dir-radial",s,n,o),n=CONFIG.guide_direction_horizontal,o="手描き地図風の水平地形",i.makeUmiImgs("#dir-horizontal",s,n,o),n=CONFIG.guide_direction_vertical,o="おそらく島の写真",i.makeUmiImgs("#dir-vertical",s,n,o),await new Promise((e=>setTimeout(e,150))),n=CONFIG.guide_noise_octaves,o="手描きの地図のスタイルの非常にシンプルな地形",i.makeUmiImgs("#noi-octaves",s,n,o),n=CONFIG.guide_noise_persistence,o="手描きの地図のスタイルの非常に詳細な地形",i.makeUmiImgs("#noi-persistence",s,n,o),n=CONFIG.guide_noise_frequency,o="手描きの地図のように細かく細かい島々が並ぶ、非常に断片的な世界",i.makeUmiImgs("#noi-frequency",s,n,o)}async function paintGalleryCanvases(){await Umi.loadShaders("glsl/");const e=document.querySelector(".grid"),t=getComputedStyle(e),a=t["grid-template-columns"].split(" ").length,r=parseInt(t.width.slice(0,-2)),i=(parseInt(t.height.slice(0,-2)),new Paint(r/a,200));let s={},n=CONFIG.islands,o="おそらく島の写真";i.makeUmiImgs(".islands .umi",s,n,o),await new Promise((e=>setTimeout(e,250))),s={overrideSize:!0},n=CONFIG.desert,o="おそらく砂漠のオアシスの写真",i.makeUmiImgs(".desert .umi",s,n,o),n=CONFIG.forest,o="おそらく山岳林の写真",i.makeUmiImgs(".forest .umi",s,n,o),n=CONFIG.arctic,o="おそらく氷山の写真",i.makeUmiImgs(".arctic .umi",s,n,o)}async function paintTravelCanvases(){await Umi.loadShaders("glsl/");const e=new Paint(256,100),t=750;let a={},r=CONFIG.postcard,i="島々の絵葉書";e.makeUmiCanvas("#postcard",a,r,i),await new Promise((e=>setTimeout(e,t))),i="レイヤードアイランドのレンダリング",e.makeUmiCanvas("#skip-1",a,r,i),await new Promise((e=>setTimeout(e,t))),i="色を使わないレイヤード・アイランド・レンダリング",e.makeUmiCanvas("#skip-2",a,r,i),await new Promise((e=>setTimeout(e,t))),i="ノイズレンダリング",e.makeUmiCanvas("#skip-3",a,r,i),await new Promise((e=>setTimeout(e,t))),i="3Dアイランドレンダリング",e.makeUmiCanvas("#special-3d-skip",a,r,i)}customElements.define("custom-svg",LogoTag),window.onload=paintCanvases;const Paint=class{constructor(e,t){this.frac=e,this.ppc=t}makeUmiImgs(e,t,a,r){[...document.querySelectorAll(e)].forEach((e=>{const i=e.getContext("webgl");i.canvas.width=i.canvas.width/this.ppc*this.frac,i.canvas.height=i.canvas.height/this.ppc*this.frac;const s=new Umi(i,t);s.configureShader(a),s.draw();const n=s.gl.canvas.toDataURL(),o=document.createElement("img");o.alt=r,o.src=n;e.parentNode.replaceChildren(o)}))}makeUmiCanvas(e,t,a,r){const i=document.querySelector(e),s=i.getContext("webgl");s.canvas.width=s.canvas.width/this.ppc*this.frac,s.canvas.height=s.canvas.height/this.ppc*this.frac;const n=new Umi(s,t);n.configureShader(a),n.draw();const o=n.gl.canvas.toDataURL("image/jpeg",.2),l=document.createElement("img");l.src=o;const c=i.parentNode;if(c.replaceChildren(l),e.includes("skip-3"))return void(l.onload=()=>{l.parentNode.parentNode.hidden=!1,document.querySelector(e+"-arrow").hidden=!1});const d=document.createElement("canvas");d.width=256,d.height=256,c.appendChild(d);const m=d.getContext("2d");l.onload=()=>{l.parentNode.parentNode.hidden=!1,e.includes("postcard")||(document.querySelector(e+"-arrow").hidden=!1),Paint.construct(l,m,e);const t=document.createElement("img");if(t.alt=r,t.src=m.canvas.toDataURL("image/png",0),c.replaceChildren(t),e.includes("skip"))return;const a=document.createElement("img");a.id="branch",a.alt="桜の枝",a.src="img/branch.png",c.appendChild(a);const i=document.createElement("img");i.id="sakura",i.alt="桜の花",i.src="img/sakura.png",c.appendChild(i)}}static construct(e,t,a){t.drawImage(e,0,0),e.parentNode.removeChild(e);const r=t.getImageData(0,0,256,256);t.canvas.height=128;const i=r.data,s=a.includes("special-3d")?2:16,n=256/s,o=[];for(let e=0;e<256;e+=s){const t=[];for(let a=0;a<256;++a){const r=4*(256*e+a);t.push(i[r])}for(let e=1;e<255;++e){const a=.7*t[e-1]+.15*(t[e]+t[e+1]);t[e]=parseInt(a)}o.push(t)}const l=e=>hexArrayToColors([e])[0].map((e=>parseInt(255*e))),c=e=>({r:e[0],g:e[1],b:e[2]}),d=c(l("#f98d27")),m=c(l("#555555")),g=[c(l("#0a51ad")),c(l("#3a82d3")),c(l("#9be2fc")),c(l("#bfa572")),c(l("#4f7223")),c(l("#b5ba77")),c(l("#efede8"))],h=[0,.15,.2,.205,.25,.7,.8].map((e=>255*e)),u=new Array(131072);for(let e=0;e<n;++e)for(let t=0;t<256;++t){const r=o[e][t],i=r*(.5*e/n),l=i/r,c=a.includes("skip-2");for(let a=0;a<=i;++a){const r=a+s/2*(n-e);let o,p=255-(n-e)*s*.75;p=1-p/255,p/=1.5;const f=a/l;if(!c&&0===a){o=g[0];for(let e=0;e<s/2;++e){const a=4*(256*(255-(r+e))+t);u[a]=Paint.lerp(o.r,d.r,p),u[a+1]=Paint.lerp(o.g,d.g,p),u[a+2]=Paint.lerp(o.b,d.b,p),u[a+3]=255}continue}o=Paint.pickColor(f,g,h),c&&(o=a>i-2?m:g[g.length-1]);const C=4*(256*(255-r)+t);u[C]=Paint.lerp(o.r,d.r,p),u[C+1]=Paint.lerp(o.g,d.g,p),u[C+2]=Paint.lerp(o.b,d.b,p),u[C+3]=255}}r.data.set(u),t.putImageData(r,0,s/2-128)}static pickColor(e,t,a){if(e<=a[0])return t[0];for(let r=1;r<t.length;++r)if(e<=a[r]){const i=(e-a[r-1])/(a[r]-a[r-1]);return Paint.lerpColor(t[r-1],t[r],i)}return t[t.length-1]}static lerpColor(e,t,a){return{r:Paint.lerp(e.r,t.r,a),g:Paint.lerp(e.g,t.g,a),b:Paint.lerp(e.b,t.b,a)}}static lerp(e,t,a){return(1-a)*e+a*t}},Umi=class{constructor(e=null,t=null){e?.canvas?this.gl=e:null!==e&&console.error("Invalid context, expected WebGL"),this.options={logQuery:t?.logQuery??!1,overrideSize:t?.overrideSize??!1}}useId(e){this.gl=document.getElementById(e)?.getContext("webgl"),this.gl||console.error(`Could not find id: '${e}'`)}useClass(e){this.gl=document.getElementsByClassName(e)[0]?.getContext("webgl"),this.gl||console.error(`Could not find class: '${e}'`)}static async loadShaders(e,t="vertex",a="fragment"){const r=await this.getShaders(e,t,a);Umi._shadersTemplate={...r}}configureShader(e=null,t=!1){if(!this.gl)return void console.error("WebGL context not set.Try useId(id) or useClass(name) before running this");const a={};t?(a.attributes=Umi._attributes,a.gradients=Umi._gradients):(a.attributes=this.getAttributes(e?.attributes),a.gradients=e?.gradients||Umi._gradients),this.gl.canvas.width=a.attributes.width,this.gl.canvas.height=a.attributes.height,this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height);const r=Umi.configureFragment(Umi._shadersTemplate.fragment,a);this.shadersCompiled={},this.shadersCompiled.fragment=Umi.createShader(this.gl,this.gl.FRAGMENT_SHADER,r),this.shadersCompiled.vertex=Umi.createShader(this.gl,this.gl.VERTEX_SHADER,Umi._shadersTemplate.vertex)}draw(){const e=Umi.createProgram(this.gl,this.shadersCompiled.vertex,this.shadersCompiled.fragment),t=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,1,1,-1,1]),this.gl.STATIC_DRAW);const a=this.gl.getAttribLocation(e,"Position");this.gl.vertexAttribPointer(a,2,this.gl.FLOAT,this.gl.FALSE,2*Float32Array.BYTES_PER_ELEMENT,0),this.gl.enableVertexAttribArray(a),this.gl.useProgram(e),this.gl.drawArrays(this.gl.TRIANGLE_FAN,0,4),this.gl.useProgram(null)}static configureFragment(e,t){for(const a in t)switch(a){case"gradients":e=Umi.setShaderGradients(e,t.gradients);break;case"attributes":e=Umi.setShaderAttributes(e,t.attributes)}return e}getAttributes(e=null){let t,a;e?a=t=>{let a;if(t in e)a=e[t];else if(Umi._params[t]in e)a=e[Umi.params[t]];else if(["width","height"].includes(t))return!this.options.overrideSize&&this.gl.canvas[t];return a??Umi._attributes[t]}:(t=new URLSearchParams(window.location.search),a=e=>{let a=t.get(e)??t.get(Umi._params[e]);return a||(["width","height"].includes(e)?!this.options.overrideSize&&this.gl.canvas[e]:Umi._attributes[e])});const r=e=>parseInt(e),i=e=>parseFloat(e),s=e=>[1,"1",!0,"true"].includes(e);let n=r(a("width"))||window.innerWidth,o=r(a("height"))||window.innerHeight;const l=s(a("square"));l&&(n<o?o=n:n=o);const c=r(a("offsetx"))||Math.floor(Math.random()*2**20),d=r(a("offsety"))||Math.floor(Math.random()*2**20),m=s(a("radial")),g=s(a("horizontal")),h=s(a("vertical")),u=r(a("mass")),p=r(a("octaves")),f=i(a("persistence")),C=i(a("frequency")),w=i(a("water")),v={width:n,height:o,offsetx:c,offsety:d,square:l,radial:m,_rad:m?1:0,horizontal:g,_hor:g?1:0,vertical:h,_ver:h?1:0,mass:u,octaves:p,persistence:Umi.formatShaderFloat(f),frequency:Umi.formatShaderFloat(C),water:Umi.formatShaderFloat(w)};return this.options.logQuery&&console.log(Umi.joinAttributes(v)),v}static joinAttributes(e){let t=[];for(const a in e){const r=e[a];null!=r&&"NaN"!==r&&r!==Umi._attributes[a]&&r!==Umi.formatShaderFloat(Umi._attributes[a])&&"_"!==r[0]&&t.push(`${Umi._params[a]}=${r}`)}return"?"+t.join("&")}static setShaderAttributes(e,t){for(const a in Umi._attributes)e=e.replace(`%${a}%`,Umi.getIfValid(t[a])||Umi._attributes[a]);return e}static getIfValid(e){return null!=e&&!isNaN(e)&&"NaN"!==e&&e.toString()}static setShaderGradients(e,t){let a="",r="";for(let e=0;e<t.colors.length;++e){const i=t.colors[e].map((e=>Umi.formatShaderFloat(e))),s=Umi.formatShaderFloat(t.positions[e]);a+=`COL[${e}] = vec4(${i[0]}, ${i[1]}, ${i[2]}, 1.);\n\t`,r+=`POS[${e}] = ${s};\n\t`}return e=(e=(e=e.replace(/%ncolors%/,t.colors.length)).replace(/%colors%/,a)).replace(/%positions%/,r)}static formatShaderFloat(e){if(isNaN(e))return"NaN";let t=e.toString();if(!t.includes("."))return t+".";const a=t.split(".");return"0"!==a[0]?t:"."+a[1]}static async getShaders(e,t,a){const r=[t,a],i={};for(const t of r)i[t]=await Umi.getFile(`${e}${t}.glsl`);return i}static async getFile(e){return(await fetch(e,{method:"GET"})).text()}static createShader(e,t,a){const r=e.createShader(t);e.shaderSource(r,a),e.compileShader(r);if(e.getShaderParameter(r,e.COMPILE_STATUS))return r;console.log(Umi.enumerateSource(a)),console.error(e.getShaderInfoLog(r)),e.deleteShader(r)}static createProgram(e,t,a){const r=e.createProgram();e.attachShader(r,t),e.attachShader(r,a),e.linkProgram(r);if(e.getProgramParameter(r,e.LINK_STATUS))return r;console.log(e.getProgramInfoLog(r)),e.deleteProgram(r)}static enumerateSource(e){return e.split("\n").map(((e,t)=>`${("   "+t).slice(-3)}: ${e}`)).join("\n")}};Umi._shadersTemplate={},Umi._attributes={width:256,height:256,offsetx:0,offsety:0,square:!1,radial:!1,horizontal:!1,vertical:!1,mass:150,octaves:6,persistence:.6,frequency:.005,water:.5,_rad:0,_hor:0,_ver:0},Umi._params={width:"w",height:"h",offsetx:"x",offsety:"y",square:"sq",radial:"r",horizontal:"hz",vertical:"vt",mass:"m",octaves:"o",persistence:"p",frequency:"f",water:"wt"},Umi._gradients={colors:[[.04,.32,.68],[.23,.51,.83],[.61,.89,.99],[.75,.65,.45],[.31,.45,.14],[.71,.73,.47],[.94,.93,.91]],positions:[0,.15,.2,.24,.33,.7,.8]};
//# sourceMappingURL=script.min.js.map
